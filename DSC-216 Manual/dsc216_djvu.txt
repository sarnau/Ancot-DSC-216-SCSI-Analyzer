Portable 


SCSI bus ANALYZER 

Model # D S C - 2 1 6 


USER’S MANUAL 


Revision: 2.5 
January 1995 


ANCOT Corporation 
115 Constitution Drive 
Menlo Park, California 94025 
(415)322-5322 



(C) Copyright by ANCOT Corporation 1993, 1994, 1995 



SECTION 1. 

DESCRIPTION OF EQUIPMENT 


1.1 Introduction . 1 

1.2 General Description . 1 

1.3 System Overview . 2 

1.4 Timing Conditions in Recording . 4 

1.5 Front Panel . 5 

The 24-key keypad . 6 

1.6 Notational Conventions . 7 

1.7 User Interface . 7 

1.8 Timer & Time Stamping . 9 

1.9 Electrical connection on SCSI bus . 9 

1.10 SCSI Bus Termination and TERMPWR . 9 

1.11 Technical Specifications . 10 

1.12 SCSI standard specifications and references . 12 

1.12.1 SCSI Standard Specifications . 12 

1.12.2 Other literature . 13 


SECTION 2. 

TRACER/ANALYZER FUNCTIONS AND COMMANDS 


2.1 Trace Memory . 13 

2.2 Functions and Commands . 14 

2.2.1 Main Menu . 14 

2.2.2 Start tracing . 15 

2.2.3 Pause tracing . 15 

2.2.4 Stop tracing . 16 

2.2.5 Mode of tracing . 16 

2.2.5.1 Save All/Skip data . 16 

2.2.5.2 Capture phase changes . 16 

2.2.5.3 Filtering by SCSI ID . 17 

2.2.5.4 Capture selection only . 17 

2.2.5.5 Capture 4 edges REQ/ACK . 17 

2.2.5.6 Capture on external clock . 18 

2.2.5.7 Capture SCAM Protocol . 18 

2.2.6 Trigger setup . 18 

2.2.7 Clear trace . 18 

2.2.8 Write trace . 19 

2.2.9 Save/Restore trace . 19 

2.2.10 Display trace . 19 

2.2.11 Setup display format . 19 

2.2.12 Find event . 20 

2.2.13 Calculate time differential . 20 

2.2.14 Utilities . 20 

2.2.15 SCSI Emulator . 21 

2.2.16 User Programs . 21 

2.3 Save/Restore trace functions . 23 

2.3.1 Save trace to host via serial port . 23 

2.3.2 Save trace to host via parallel port . 24 

2.3.3 Save trace to Mirror memory . 25 

2.3.4 Restore trace from host via serial port . 25 

2.3.5 Restore trace from host via parallel port . 26 

2.3.6 Restore trace from Mirror memory . 26 


















































SECTION 3. 

DISPLAYING THE TRACE MEMORY 


3.1 Introduction . 27 

3.2 Structured display format . 29 

3.2.1 Structured display with NARROW/WIDE data transfers . 

3.2.2 Structured display with NARROW data transfers . 32 

3.2.3 Structured display of SCAM protocol . 32 

3.3 Binary display format . 33 

3.3.1 Binary display of SCAM protocol . 37 

3.4 HEX dump format . 38 

3.5 Compact display format . 38 

3.6 Command profile format . 39 

3.7 Changing the display format . 41 


SECTION 4. 

SEARCHING FOR EVENTS IN THE RECORDED TRACE 

4.1 Introduction . 43 

4.1.1 Select a custom control bit pattern . 44 

4.2 Select the search options . 45 

4.2.1 Search for WIDE data pattern . 45 

4.2.2 Set the search direction . 46 

4.2.3 Set the ’occurrence’ counter . 46 

4.2.4 Set the search address limits . 46 

4.2.5 Set the search starting address . 47 

4.2.6 Set the data bits pattern . 47 

4.4 Repeating the search . 48 

SECTION 5. 

TRIGGERING 

5.1 Introduction . 49 

5.2 Trigger selections . 49 

5.3 Trigger examples . 52 

5.3.1 Post triggering . 52 

5.3.2 Pre triggering . 53 

5.3.3 No trigger required . 53 

SECTION 6. 

SCSI INITIATOR EMULATION 

6.1 Introduction . 55 

6.2 Initiator Emulation . 55 

6.2.1 Change LBA < A A> . 57 

6.2.2 Macros < A B>, < A L> . 57 

6.2.3 Data Buffer Management < A D> (see 6.3) . 58 

6.2.4 Edit CDB < A E> . 58 

6.2.5 Increment LBA after Write/Read < A F>, < A G> . 58 

6.2.6 Autofill < A H> . 59 

6.2.7 Initiator ID < A I> . 59 

6.2.8 Compare Buffers < A K> . 60 

6.2.9 Link & Flag Bit < A N> . 60 

6.2.10 SCSI Reset < A R> . 60 

6.2.11 Target ID < A T> . 61 

6.2.12 Logical Unit Number (LUN) < A L> . 61 

6.2.13 Emulator setup < A X> (see 6.4) . 61 













































6.2.14 Queue Tag < A Y> . 61 

6.2.15 Repeat Command < A Z> . 62 

6.3 Data Buffer Management < A D> . 63 

6.3.1 Select Buffer . 63 

6.3.2 View and Edit Buffer . 63 

6.3.3 Fill Buffer . 64 

6.3.4 Copy Buffer . 64 

6.3.5 Set Buffer Size . 65 

6.4 Emulator setup < A X> . 66 

6.4.1 Alloc / Xfer Lengths . 66 

6.4.2 Arbitration . 67 

6.4.3 Identify Message . 67 

6.4.4 Disconnect / Reconnect . 67 

6.4.5 Custom Message . 68 

6.4.6 Data Protocols . 68 

6.4.7 Mode Sense / Select setup . 70 

6.4.8 Target Type . 70 

6.4.9 SCSI Version . 71 

6.4.10 Timeout selection . 71 

SECTION 7. 

UTILITIES 

7.1 Introduction . 73 

7.2 Calculate elapsed time in trace . 73 

7.3 The Utility functions menu . 74 

7.3.1 Using the screen saver . 74 

7.3.2 Printing display information . 74 

7.3.3 Printer timeout . 75 

7.3.4 Show system configuration . 75 

7.3.5 Restoring system default parameters . 75 

7.3.6 REMOTE CONTROL from external host (PC) . 

7.3.7 Setting serial port parameters . 77 

SECTION 8. 

INSTALLATION 

8.1 Unpacking . 79 

8.2 Initial Turn-on . 79 

8.3 Initial Check-out . 80 

8.4 Communication, Interfacing, and Setup . 80 

8.5 EPROM firmware upgrades . 81 

SECTION 9. 

OPTIONS 

9.1 Introduction . 83 

9.2 The applications . 83 

9.2.1 ’Antest’, the disk test program . 83 

9.2.2 C language cross compiler . 84 

9.2.3 The Trace MIRROR Memory option . 84 

9.2.4 SCSI connector pods . 85 











































APPENDICES 


A External Connectors and Cables . 87 

A.l I/O Interface connectors Jl, J3 . 87 

A.2 Auxiliary connectors J2, J4, J7, J8 . 88 

A.3 SCSI connector modules J5, J6 . 89 


A.3.1 S-E 68pin & 50pin conn, module (standard) . 90 

A.3.2 DIFF 68pin & 50pin conn, module (optional) . 91 

A.3.3 S-E & DIFF both 68pin conn, module (optional) . 92 

A.3.4 S-E & DIFF both 50pin conn, module (optional) . 93 

A.4 Null-Modem cables . 94 

A.5 Cable adapter DB-9 to DB-25 . 94 

A. 6 Cable adapter for trace upload using parallel port . 95 

B Escape Sequences used in screen control . 97 

B. l General . 97 

B.2.1 Escape Sequences - OUT (from DSC-216 to terminal) . 97 

B.2.2 Escape Sequences - IN (from terminal to DSC-216) . 98 


C Trace Upload/Download formats . 99 

C.l Header/Trailer Information . 99 

C.2 Raw data format . 100 

C.2.1 Natural SCSI events . 100 

C.2.2 Artificial SCSI events . 101 

C.3 Readable formats . 102 

C.4 Trace dump format . 103 


D The Keypad & External Keyboard functions . 105 


D.l General . 105 

D.2 The keypad & keyboard table . 105 


E The SCAM protocol . 107 

E.l General . 107 

E.2 Using the DSC-216 for SCAM . 108 

E.2.1 Activating the SCAM display . 108 

F Trace MIRROR Memory option . 109 


G Save/Restore trace data to/from PC host via parallel port ... Ill 


H Save/Restore trace data to/from PC host via serial port . 113 


H.l Setting up PROCOMM options . 113 

H.2 Saving a trace to host . 116 

H.3 Restoring a trace from host . 117 


J 

J.l 

J.2 


J.3 

J.4 

J.5 

J.6 

J.7 

J.8 

J.9 


SCSI Facts & Tips . 119 

Cabling . 119 

Electrical connection and termination on the SCSI bus 

Single-Ended . 120 

Differential . 120 

TERMPWR Considerations. 

SCSI Initiators & Targets . 122 

SCSI device addressing . 122 

SCSI data parity . 123 

Mixing SE & Diff SCSI devices . 123 

SCSI cable length . 123 

Extending the SCSI cable . 123 


... 119 

121 


INDEX 


125 


















































SECTION 1 


DESCRIPTION OF EQUIPMENT 

1.1 INTRODUCTION 

The DSC-216 is a highly portable, advanced, versatile, user-configurable SCSI Bus Analyzer. This 
instrument was designed for the following applications: 

• Development work in the laboratory. 

• Production test. 

• Field service applications. 

The DSC-216 Tracer/Analyzer provides a comprehensive SCSI event tracer and debugger with 
powerful triggering capability. It provides displays of SCSI Bus activity in a variety of formats for 
easy interpretation. 

1.2 GENERAL DESCRIPTION 

The SCSI Bus Analyzer is used for recording activity on the SCSI Bus to which it is non-intrusively 
connected. Its circular buffer can hold up to 32K events (standard), 128K or 512K events (optional). 
The recording method is 'event driven'; only valid data or transitions on certain SCSI signals are 
recorded. At the time of recording, each event is time-stamped. 

The recording can later be played back in several forms. It can be displayed on a built-in 
electroluminescent (EL) flat screen, or sent to a printer to provide a hard copy. Recorded data can 
be up-loaded to a host computer, and saved on a disk to build a data base for post processing. 
Optionally, it also can be saved in a non-volatile ("Mirror") memory to be examined later. 

The display of recorded SCSI Bus activity can be in two basic forms: a "binary" format similar to 
a time-domain form of logic analyzers, or a "structured" format which is an interpreted 
"SCSI-English" form, easily understandable. Other, more specialized display formats are also 
available. See section 3. 

1.3 SYSTEM OVERVIEW 

A simplified block diagram of the DSC-216 SCSI Bus Analyzer is shown below: 



(optional) | r 

SCSI Emulator | 

1 1 

crcT rwo 


FAS256 128KB J 

_ \T _ 1 1 _ 

y 1 

c 




C 


I_ 


s 

| | Trace | | 

Control 1 

1 i i 1 1 

Non- 

I 

Timer | Memory 

| | MPU | Program | Static | Volat. | 

B 

| | 32Kx72 | | 

1 170 | up to | | 

EPROM RAM | EEPROM | 

1 1 32KB/ | | 


ju | seconds | 512Kx721 | | 68008 1128KB 1128KB | 8KB 


* 






Local bus 


I SCSI Bus I 
=- =>> Receivers »= 


FRONT PANEL 
w.Indicators, | 

EL screen, | 
Keypad 
Connectors | 
-\_\_ 


L /-/- 1 I 

I I l--v—, 

j | | Parallel | 

i 1 1 i 

V-, III JKDB25) 

j 1 -< Printer 

| | | J7(BNC) 

| L_< Ext.Trigger Input 

| J8(BNC) 

1 -< Ext.Synchr.Output 

J 

J2(DB15) 

-< Expansion Port Input 


I J4(DIN5) 

J3(DB9) I-< PC/AT Keyboard 

-< COM Port 


J5 & J6 SCSI connectors (on the pod) 


The system carries out several major functions: 

The Tracer/Analyzer unit is connected to the SCSI Bus by its line receivers. Note that the tracer is 
a non-intrusive device, which merely senses activity on the SCSI Bus through isolating receivers. 
The load on the tested SCSI Bus is minimal - one 74LS14 input load (or equiv.) per line. 

From line receivers, the signals are directed to separate circuits: the trace memory, the trigger 
circuitry, and to the front panel to be displayed using LED indicators. All parts of the DSC-216 are 
internally controlled by the local MPU (Motorola’s MC68008) running at 8MHz. The control 
program for the MPU is saved in EPROM with up to 128KB (256KB on Emulator models) capacity. 


Communication with the operator is by a built-in keypad, and electroluminescent (EL) flat screen 
display. A parallel printer may be connected for hard-copy output. In addition, a PC/AT type 
keyboard can be attached. The Analyzer can also be placed in Remote Control’ mode, controlled 
by an external PC or VT-100 type monitor. Non-volatile EEPROM memory provides for storage of 






setup parameters, and user option settings. 


1.4 TIMING CONDITIONS IN RECORDING 

Recording in the Trace Memory is event-driven. This means that only transitions on the SCSI Bus 
are recorded. A valid change (event) is determined by the recording mode, and is defined as a 
positive or negative transition on the BUSY, SEL, ATN, and RST lines. 

During Information Transfer Phases, a SCSI event can be qualified by: 

• Any valid edge of the REQ or ACK signals 

• During READ operations (Data from Target to Initiator), status of the SCSI Bus 
signals is recorded in the Trace Memory following the leading edge of REQ signal. 

• During WRITE operations (Data from Initiator to Target), status of the SCSI Bus 
signals is recorded following the leading edge of ACK signal. 

• Recorded during any transition of the REQ or ACK signals, i.e. following all 4 edges 
of REQ and ACK. 

• Recording of data during data-in or data-out phase can be skipped (after the leading 
8 or 32 bytes). Note that all bytes transferred are counted, and the total count will 
appear in the trace. 

• Any transition on the MSG, C/D, or I/O SCSI Control lines can be recorded. 

• Status of the SCSI Bus and 3 external signals can be recorded on every negative 
transition of the bit-0 of the expansion port (J2). 

• Certain changes on data lines when tracing the SCAM protocol. 

For more on recording modes, read Section 2.2.5. 

1.5 FRONT PANEL 

The front panel of the DSC-216 contains a flat-panel neon plasma display screen, a 24-key keypad, 
two pushbutton switches, and 31 LED indicator lights. Several connectors, a cooling fan, and the 
main power switch module also share the front panel. 

The DISPLAY SCREEN is a high-visibility electroluminescent (EL) flat panel, capable of 
displaying 25 lines of 80 characters each. 

The SYSTEM RESET switch is used for restarting the system. 

The SCSI RESET switch is used for generation of the RESET condition on the SCSI bus. 



The LED indicators are: 


♦ POWER 

♦ TRACING 

♦ TERMINATOR POWER 

♦ PRINT mode 

♦ SCSI Control Signals: BUSY, SEL, C/D, I/O, MSG, REQ, ACK, RST and ATN 

♦ SCSI Data Signals: DO - D15, and Data-Parity (2) 

CONNECTORS located on the front panel of the DSC-216 are: 

♦ J1 - Parallel Printer (DB25 female) 

♦ J2 - Expansion 3-bit port Input (DB15, female) 

♦ J3 - Serial I/O port (DB9 female) 

♦ J4 - 5-pin connector for PC/AT keyboard (DIN female) 

♦ J5 - SCSI connector (50-pin, female, alternative-2 - on S/E pod)* 

♦ J6 - SCSI connector (68-pin 'P' type, female - on S/E pod)* 

♦ J7 - External Trigger Input (BNC connector) 

♦ J8 - External Synch Output (BNC connector) 

(*) Note: The J5 and J6 connectors are on a plug-in unit which optionally can be of a different type. 
The standard screws are: 2-56 with the 50-pin HD connectors and 4-40 with the 68-pin HD 
connectors. Contact the factory if you require any changes. 

EXTERNAL TRIGGER INPUT - The J7 connector (coaxial BNC type), located on the right side 
of the front panel of the DSC-216 serves for input of an external trigger signal. The DSC-216 will 
trigger on negative transition if enabled from the trigger menu. 

The basic trigger functions, which most users would need, have been implemented in the system. 
Additional unique trigger functions may be added by using this external trigger. 

EXTERNAL SYNC OUTPUT - The J8 connector (coaxial BNC type), located on the right side 
of the front panel of the DSC-216 serves for providing a trigger signal, which may be used for 
triggering external instruments like oscilloscopes, logic analyzers, etc. This signal is a low-going 
pulse which occurs at the same time the trigger event occurs. 

EXPANSION 3-BIT PORT INPUT - There is often a need to compare the relationship of external 
signals with the SCSI Bus signals. For this purpose, the J2 connector is available. This input port 
allows for up to 3 signals to be recorded together with the SCSI trace. This additional data, after 
being recorded, will be displayed as three "0" or" 1" digits, in the BINARY display mode. The bit-0 
(LSB) can be used as a clocking signal if "external clock" is enabled from the recording mode menu. 

See Appendix A for the J2 connector pinout. Note that on this connector there are two pins that carry 
Vcc (+5V, available up to 100mA), and two pins for GND. The Ycc and GND may be used to 
power external devices like AD converters, or other adapters. 





The integrated AC POWER MODULE consists of the AC main switch, fuse and a three-pin 
receptacle for the AC line cord. The fuse is accessible under a cover in the body of the module. 

The 24-key KEYPAD - allows using keys at three levels: the basic function, the ’ALT’ and the 
’CTRL’ modified function. Note that the keypad and the external keyboard can be used 
interchangeably. You can be using both at the same time: press a key on the keypad, press several 
keys on the external keyboard, go back to the keypad, etc. 

The names of keys on the keypad were selected so that their starting letter corresponds to the letter 
on the external keyboard as close as possible. For example the <Run> key is the same as the <R>, 
the <Stop> key is the same as <S>, etc. The number-keys on the keypad are the ’ALT’ set, and the 
special less frequently used functions are the ’CTRL’ set. 

The table in Appendix D lists all keys of the keypad, their corresponding keys on the external 
keyboard, and their functions. 

The SCSI Connector Adapter (Pod) - is a field changable pod for Single-Ended or Differential 
SCSI interface using various connector types. See Appendix A for pinout description. 

1.6 NOTATIONAL CONVENTIONS 

The primary operator interface with the DSC-216 is through the keypad on the front panel, or 
through the PC/AT keyboard. In this manual the following notation is used when referring to keys 
and key sequences: 

Keys are referred to by their legend, enclosed in angle brackets "<" and ">". Examples: <Esc>, 
<Enter>, <Run>, <R>, <SP> (for "space" key) etc. 

Keys that are to be depressed together (the "control combinations") are shown with a " A " (Up-Arrow) 
preceding the other character. For example < A C> or <Ctrl-C> means that you type the "C" key while 
the Ctrl key is depressed. Combinations may also appear as e.g. <Alt-C>, which means that you type 
the "C" key while the <Alt> key is being depressed. 

In menus or in various prompts, the optional suggested selections are displayed in parentheses "(", 
and ")". Current selections or defaults are displayed in square brackets "[", and "]". 

1.7 USER INTERFACE 

The user interface is via screen and keypad built into the front panel on the DSC-216, via an 
external keyboard (connected to J4), or via screen and keyboard of a remote control PC/CRT. 

The SYSTEM RESET switch, on the lower left side of the DSC-216 front panel, if pressed, will 
reset the system to its initial Power-On state. Remember that selected setup values, stored in 
EEPROM non-volatile memory, do not change after reset, or if the system is powered OFF. The 
SYSTEM RESET switch does NOT generate Reset on the SCSI Bus. 

SCSI RESET switch, near the SYSTEM RESET switch, if pressed, will generate Reset condition 
(continuous level) on the SCSI bus; however, it will not affect operation of the DSC-216. 



LED indicators on the front panel display instantaneous status of the SCSI data lines and SCSI 
control lines. These indicators will typically be useful during a major malfunction, when the object 
system stalls. In these situations the LEDs will help to determine which SCSI Bus phase the system 
is stopped in, and what condition the active SCSI device is waiting for. 

For example, an Initiator may be trying to select a non-existing Target device and is not receiving 
a BUSY signal, or Target may be asserting REQ signal for a data transfer, and is waiting for ACK 
from the Initiator. 

The TRM.PWR LED indicates whether TERMINATOR POWER is being supplied on the SCSI 
Bus, and that it is 4.0 Volt or higher. It is the responsibility of the system integrator to decide which 
device will supply it. 

The TRM.PWR LED is an important indicator, because without the TERMINATING POWER 
applied, the SCSI Bus may still work, but its reliability may be affected. Also remember, that some 
SCSI Bus configurations drive their terminators internally and do not need to drive the TRM.PWR 
line on the SCSI Bus. 

The TRACING LED indicator lights up when the DSC-216 is in the tracing mode following <R> 
(RUN). It will stay ON until the tracing is stopped either by the <S> (Stop) key, the <P> (Pause) key, 
or as a result of a trigger condition. 

The POWER LED indicates that the DSC-216’s power is turned ON. 

The operator interface from the keypad, or from the external PC/AT keyboard, is completely 
menu-driven. The main menu at the root of the DSC-216 firmware system serves for selection of 
functions related to tracing, trigger selection, and display of recorded data. 

Most of the functions are actuated by a single key stroke; selection is recognized by the system, and 
the rest of the word is filled in automatically. The function will execute, or if more input is needed, 
a menu or prompt will appear on the screen. If a wrong key is pressed, the system will either beep, 
and give the operator a second chance, or in some situations will abort and exit that function. The 
type of each individual operation will determine which of the two actions will be taken. 

Several keys have a characteristic function: 

By pressing <Enter>, <Space>, or <Yes> while at the root level, the main menu will be 
re-displayed. 

<Q> or <q> keys will cause exit from a current function, or exit the current menu, and stepping 
one level back. By repeating the <Q>/<q>, eventually you will return to the main menu at the 
root. The <Esc> or <Quit> from the keypad have similar effect. 

< A C> : There may be several prompts to be answered before a certain function is started. If you 
change your mind in the middle of this selection process, then by pressing the < A C> key you 
can quit that selection sequence and exit immediately to the root. You can also use the < A C> 
to exit any selection and return directly to the root menu level. 

<Pause> or < A S> causes the system to pause. Press < A Q> to continue. 



< A Print> or < A P> is a toggle switch which will turn "parallel printing" ON or OFF. Printing 
mode is indicated by a small LED at the < A Print> key. By "parallel printing" we mean sending 
all data that is being displayed on the screen also to the printer port. Note that only the trace data 
will be printed (not the menus etc.). 

Note that the keys < A C>, < A S>, and < A P> work the same as on any PC system. 

OTHER GENERAL RULES: 

If a question is asked in a selection dialog expecting a "Y/N" answer, use keys marked <Yes> and 
<No> from the keypad. If an external keyboard is used, typing a "Y" is interpreted as YES, and 
anything else is interpreted as NO. 

In edit sessions typically the current selection is displayed. If a different value is required, the 
operator should type it in. If only <Enter> is typed, the current value will stay unchanged. By typing 
(period), <Esc>, or <Q> the edit session is terminated. 

Numeric values, except the timing information (e.g., Time-Stamp), or unless marked, are displayed 
in Hex format. Similarly, all numeric answers are expected to be in Hex unless marked otherwise. 

Currently selected values are displayed in "[ ]" brackets. If such a value appears at the cursor for 
input, typing <Enter> selects that value. 

From menus displaying a highlighted entry, the arrow keys move the highlight from one entry to the 
next. Most menu selections also have a "selector" key, which will move the highlight directly to that 
entry. 

1.8 TIMER AND TIME-STAMPING OF RECORDED SCSI EVENTS 

There is a 4-byte, 50 MHz counter in the DSC-216 Analyzer which is used for marking each 
recorded event in trace memory with a time stamp. The resolution is 20 nanoseconds. The timer will 
wrap around after 171 seconds. 

The time stamp is displayed together with the recorded data in the BINARY display format. It can 
be selected to show as time differential (time increment from the previous event), or as time elapsed 
from the beginning of the tracing (including possible 3-minute wrap-arounds). This selection is done 
from the keypad by pressing the < A TmFmt> key while in the display mode. Timing information 
is also available in the STRUCTURED display. When enabled, the duration of each phase will be 
displayed on the last line of that phase (if space permits). 

1.9 ELECTRICAL CONNECTION ON THE SCSI BUS 

There are two alternatives for connecting the SCSI bus: the SINGLE-ENDED and DIFFERENTIAL 
alternatives. They are both supported on the DSC-216 Analyzer, by using interchangeable pods. 
Various versions of interface pods and pinouts of all connectors used are listed in Appendix A. 
SCSI FACTS & TIPS’ in Appendix J. is a recommended reading for those interested to know more 
about the S-E and Diff interfaces. 



1.10 SCSI Bus TERMINATION AND TERMINATION POWER 


The SINGLE-ENDED SCSI interface signals in the DSC-216 are terminated by a built-in active 
terminator. This terminator is enabled by a sliding switch marked "TERM" positioned to the left 
from the J5 SE SCSI connector on the SCSI connector adapter. 

The DIFFERENTIAL SCSI interface signals are NOT terminated (i.e., there is no internal 
termination provided). Use the external SCSI-DIFFERENTIAL Terminator. Power (TERMPWR) 
for this Terminator, if enabled by the "Trm.Pwr" switch (positioned to the left from the J5 SCSI 
connector), is supplied in both SCSI connectors, the J5 and J6. 

The TERMPWR line in the external SCSI-Terminator is interconnected to both connectors; therefore 
Terminator Power (+4.25 Volt) can be supplied from either end of the SCSI cable, by the external 
SCSI device, or by the DSC-216. 

The TERMPWR is protected by a serial (Schottky) diode for protection against back flow, and by 
a 1.0 Amp fuse for protection against electrical short. The fuse acts as a circuit breaker with 
automatic reset. In case of a short on TERMPWR, the breaker disconnects the circuit; when the short 
is removed, the breaker restores TERMPWR within 20 seconds. 

!!! WARNING !!! 

NOTE THAT IF TERMPWR IS SUPPLIED BY MULTIPLE SOURCES TO THE 
SCSI Bus, AND IF ACCIDENTALLY THE TERMPWR’ PIN OF THE SCSI Bus 
CABLE GETS GROUNDED, THEN THE TERMPWR’ LEAD OF THE SCSI Bus 
CABLE WILL HAVE TO WITHSTAND THE SUM OF THE CURRENTS FROM 
ALL THE SOURCES (EACH FUSED AT 1 AMP) BEFORE THE FUSES BEGIN 
TO FAIL ! 

The DSC-216 analyzer is shipped from the factory with TERMPWR enabled, and in the case of 
the SE interface, also with the terminator enabled as a default setting. As a rule, there should be 
exactly two terminators on a SCSI bus, one on each physical end. Therefore, before connecting 
the analyzer to a system to be tested, see whether you should leave the terminator enabled and 
whether you need the TERMPWR on, depending on where you are connecting the analyzer - in 
the middle or at the physical end of the SCSI cable. 

’SCSI FACTS & TIPS ’ in Appendix J is a recomended reading for those interested in more details 
about the S-E or Diff interfaces, and SCSI bus termination methods. 

1.11 TECHNICAL SPECIFICATIONS 

♦ Compatible with SCSI specifications as defined by the ANSI X3T9.2 committee for 
SCSI-1 and SCSI-2, and the current draft SCSI-3 SPI/SIP. 

♦ Asynchronous data transfer rates to over 10 MHz 

♦ Synchronous data transfer rates to over 10 MHz 

♦ Single-ended (SE) interface is standard; differential (Diff) interface is optional. SCSI 
cable adapters/pods are available for SE or Diff, and for 50-pin or 68-pin connectors. 



♦ Non-intrusive tracer. Only signal changes are stored, therefore recording time is not 
limited 

♦ Trace memory is 32K events deep, and 72 bits wide. Optionally it can be expanded to 
512K. 

♦ Up to three external signals can be recorded together with SCSI in the trace memory to 
allow tracing in the tested device. External port bit-0 can be used as "clocking" (negative 
edge is used) 

♦ Recording modes: record all, or skip data, record one or all four edges of REQ and ACK, 
phase changes, external clock, and filtering by SCSI ID, recording of selections only, or 
recording of SCSI-3 SCAM protocol. 

♦ Display of recorded trace data in several formats; Structured (Pascal-like), expanded, or 
compact form, binary, hexadecimal, or Command Profile format. 

♦ Hard copy of all displays printed via parallel I/O port J1 on an optional printer. 

♦ Event time-stamping function up to o ver 170 seconds before timer counter wrap around, 
with 20 nanosec resolution 

♦ Non-volatile EEPROM memory for storage of current setup and mode parameters. 

♦ 128K byte (SRAM) system or program memory, and 32K(128K) byte data read/write 
buffer 

♦ Motorola 68008 local MPU, at 8MHz, with resident firmware in 128K/256K-byte 
EPROM. Configuration selectable through menu driven software, stored in non-volatile 
EEPROM memory 

♦ Serial I/O port (RS-232) with selectable baudrate of up to 38.4K baud with data format 
and parity 

Powerful triggering capability is menu selectable; 

♦ Pre-triggering 

♦ Post-triggering 

♦ Delayed-trigger 

♦ Internal triggering by: 

♦ Selected command, status or message 

♦ Combination of command and status and ID, or message and ID 

♦ (Re)select, (Re)select timeout 

♦ Data parity error 

♦ Trace Memory is full (post-trigger) 

♦ External pre- or post-triggering through trigger-output BNC connector 

♦ External synch (trigger) input through a BNC connector 



♦ SCSI Bus termination for Single-Ended interface switch-selectable (standard); For 
Differential I/F, external (optional). 

♦ Physical dimensions: 11"W x 14.5"D x 5"H. Weight: 13 lbs 

♦ Housed in an elegant, transportable, high-quality fan-cooled attache case type enclosure 
with detachable top cover. 

♦ Built-in EL flat screen & keypad, and auto-sensing switching power supply for 110-220 
Volt, 50-60Hz operation. 

♦ Storage pouch in cover is for small keyboard, cables, adapters, etc. 

1.12 SCSI STANDARD SPECIFICATIONS AND REFERENCES 
1.12.1 SCSI STANDARD SPECIFICATIONS 

Mechanical, electrical and functional definitions of the SCSI-1 are described in the 
following document: 

SCSI-1 Specification is Number: ANSI X3.131-1986 Title: Information Systems - 
Small Computer Systems Interface (SCSI) 

Can be purchased from: 

American National Standards Institute, Inc. (ANSI) 

1430 Broadway, New York, N.Y. 10018 
phone: (212)642-4900, Fax: (212)302-1286 

SCSI-2 Specifications are available from: ANSI (see above) or 
GLOBAL ENGINEERING DOCUMENTS, 

3130 South Harbor Blvd, Suite 330, Santa Ana, California 92704 
(800)854-7179 or (303)792-2181, Fax: (303)792-2192 


Refer to document X3.131-1994. 



1.12.2 OTHER LITERATURE 


"Basics of SCSI" by ANCOT (1993) 

is a quick introduction to SCSI, SCSI terms description, and glossary. 

Available from ANCOT Corporation 

115 Constitution Drive, Menlo Park, CA 94025 

(415) 322-5322 

This publication is FREE 

"Understanding The Small Computer System Interface" by NCR (1988) 
is a quick introduction to basic operations of the SCSI Bus 

Available at many bookstores, or can also be purchased directly from: 

NCR Corporation 

SCSI Technology Group 

3718 North Rock Road, Wichita, KS 67226 

"The SCSI Encyclopedia" by Jeffrey D. Stai, published by ENDL 

Provides a detailed description of basic and advanced operations of SCSI-1 and 
SCSI-2 interfaces. 

Available at many bookstores, or can also be purchased directly from: 

ENDL Publications 

14426 Black Walnut Court, Saratoga, California 95070 
(408)867-6630 



SECTION 2 


TRACER /ANALYZER FUNCTIONS AND COMMANDS 
2.1 TRACE MEMORY 

Trace Memory is a circular buffer 32K, optionally 128K or 512K events deep, with each 
event 72 bits wide. The 72 bits are used as follows: 

2 bytes (16 bits) for SCSI data 

2 bits for low and high data parity error flags 

6 bits for SCSI control signals (BSY,SEL,RST,MSG,C/D,I/0) 

4 bits each (12 bits total) for fast SCSI control signals (REQ,ACK,ATN) 

4 bytes (32 bits) for the time stamp 

3 bits for expansion port (J2) 

1 bit for internal use 

Trace Memory is used in a very efficient way: only valid data, and transitions on certain 
SCSI Bus signals cause recording. The qualifier for Data, Command, Status, and Message 
recording is REQ or ACK strobe. In standard recording mode, when REQ for DATA-IN 
is asserted, or ACK is asserted for DATA-OUT, a snapshot of the SCSI Bus (within less 
that 20 nanosec) is taken, latched, and written in the trace memory. Other recording 
modes are available. See Section 2.2.5. 

There are several SCSI control signals which cause recording whenever a transition on 
these is detected. They are: RST, ATN, SEL, and BUSY. Again, as with the Data, a 
snapshot of the SCSI Bus is taken at the time of the transition (within 20 nanosec) and the 
event is subsequently recorded in the trace memory. 

The recording can be started or stopped in three ways. Recording mode can be: 

A. Without trigger: Operator starts recording by typing <R>, and stops it by 
typing <S>. 

B. With pre-trigger. 

C. With post-trigger, either immediate or delayed. 

Whether recording with or without trigger, the <Run> (<R>) command has to be used 
to set the DSC-216 in the TRACING mode. This mode is indicated by the "TRACING" 
LED on the front panel and a "RUN" message on the screen. 

When activity on the SCSI Bus starts, the trace memory starts filling. When the memory 
is full, it will wrap around and continue writing from the physical beginning. The 
recording will continue until stopped by the <Stop> (<S>) key, or by a post-trigger 
condition, if enabled. 



At that point, the current (internal) trace memory physical address is detected, and 
beginning of valid data is calculated. This is done automatically without operator 
intervention. The earliest event still in the trace is at logical address $00000. The operator 
does not have access to the physical address however; s/he deals with logical addressing 
only. 

When recording with trigger disabled (internal or external), the trace memory acts as a 
FIFO buffer. The recording starts with the first SCSI activity following <Run>, and 
continues until stopped by <Stop>. If trace memory (physical) capacity is exceeded, it 
wraps around and starts writing from the physical beginning. 

Although the trace memory uses (internally) a linear physical address space, the internal 
firmware translates physical address to logical before displaying it, to make the trace 
memory appear circular. When recording is stopped, it reports "STOPPED AT 
xxFFF(WRAP)''. The last recorded event is at trace memory (logical) address 7FFF 
(1FFFF in 128K, or 7FFFF in 512K versions). 

When trigger is used in POST - TRIGGER mode, recording starts as described above, and 
continues until a trigger condition occurs. When the trigger finally occurs, then depending 
on trigger delay selection, the recording either: 

♦ Stops immediately; 

♦ Continues to the end of the current command when BUS-FREE Phase is 
detected; 

♦ Records a certain number of additional events before stopping (delayed 
trigger). 

However, when "Trigger on Trace Memory full" is selected, or External Trigger is used 
and the last location is filled, recording stops immediately. 

When the PRE-TRIGGER mode is used, the tracer has to be enabled by <Run>, and the 
trace memory records all activity on the SCSI Bus. However, whenever a BUS-FREE 
phase is detected, the internal trace memory address counter is reset, causing the next 
recording to be written over previously recorded data. 

This will repeat until the trigger condition occurs. When that happens, the resetting of the 
trace memory address counter will be disabled, and thus the most recent command will 
be preserved in the trace memory. All successive recording will continue, until the trace 
memory fills up. At that point the TRACING mode is reset, even in the middle of a 
command, and the recording stops. 

TRACING will stop immediately, without waiting for a BUS-FREE phase, when the 
<Stop> (<S>) key is pressed. 



2.2 FUNCTIONS AND COMMANDS 


2.2.1 MAIN MENU 

The main menu lists the basic functions of the SCSI Bus tracer. From this level various 
sub-menus can be accessed. As with all menus, selections can be made as follows : 

♦ By moving the highlight bar to the desired entry using the arrow keys, and 
then pressing <Enter> 

♦ By pressing the selector key, shown either in angle brackets <> or at the 
start of the line before the entry 

♦ In some cases, letter keys from the PC/AT keyboard act as selector keys. 


DSC-216 MAIN MENU 


TRACING TRACE MEMORY UTILITIES 

<Run > start tracing <1> - Clear trace <6> - < A Find> event 
<Pause> tracing <2> - Write trace <7> - Calc. < A Time> diff 
<Stop > tracing <3> - Save/Restore trace <8> - <Util>ities 
<Mode > of tracing <4> - <Display> trace <9> - SCSI Emulator 
<Trig >ger setup [Pre ] <5> - Setup display format <A> - User Program 


2.2.2 <R> - START TRACING (RUN) 

Pressing the <Run> key puts the DSC-216 into tracing mode. From that point on, all 
activity on the SCSI bus will be recorded, subject to the trigger conditions in force. 
From the external keyboard, the <R> key is a selector for this function. 

See Section 2.1 for a discussion of tracing itself. 

See Section 2.2.5 for a discussion of recording modes. 

See Section 2.2.6 and Section 5 for a discussion of triggering. 

2.2.3 <P> - PAUSE TRACING 

Pressing the <Pause> key temporarily halts recording of SCSI bus activity. Pressing 
<Run> will then restart recording. A message "Tracing PAUSE at <addr>" will appear. 
The ’seam’ location will be marked in the trace memory, and can later be found using the 
Find Event’ command. From the external keyboard, the <P> key is a selector for this 
function. 




2.2.4 <S> - STOP TRACING 


Pressing the <Stop> key will halt tracing. From the external keyboard, the <S> key is a 
selector for this function. 

2.2.5 <M> - MODE OF TRACING 

Press the <Mode> key to select the recording mode from the TRACE MODE SETUP 
menu as shown below. From the external keyboard, the <M> key is a selector for this 
function. 


TRACE MODE SETUP MENU 


<0> - Save All/Skip Data [All] 

<1> - Capture phase changes [ ] 

<2> - ID Filtering [0081] [ ] 

<3> - Capture Selection Only [ ] 

<4> - Capture 4 Edges REQ/ACK [E] 

<5> - Capture on external elk [ ] 

<6> - Capture SCAM protocol [ ] 

Your selection (0../Quit) ? 

Individual functions are described below. 

2.2.5.1 <0> - SAVE ALL / SKIP DATA 

This entry allows selection of the ’Skip Data’ recording mode. Number in the brackets 
shows the number of data transfers which will be recorded. When this function is 
disabled, ’All’ will be indicated. If ’Skip Data’ is enabled (selected by the left and 
right-arrow keys) then either 8 or 32 in the brackets indicate that only so many data 
transfers will be recorded. In either case, the total number of data transfers is counted and 
recorded in the trace memory, and will appear in the structured display. Skipping data 
does not inhibit the transfer of data across the SCSI bus. Only recording is affected. 

2.2.5.2 <1> - CAPTURE PHASE CHANGES 

This entry enables or disables the recording of transitions on the SCSI control lines : 
MSG, C/D and EO. When enabled, an E’character appears in the set of brackets, and any 
transition on the information transfer phase-determining lines is recorded as a SCSI event. 
When disabled, transitions on these lines do not cause an event to be recorded. 

2.2.5.3 <2> - FILTERING BY SCSI ID 

This entry enables or disables the Filter mode of recording. When enabled, the tracing 
circuits will record all transactions up to and including the selection phase. However, 
unless the pattern of ID bits during the selection phase matches the user-defined pattern, 
all other activity until the next Bus Free state will not be recorded. 




Note that it is the exact pattern of bits during Selection phase that determines whether 
later events are recorded. Therefore you can choose to observe only events between a 
particular pair of devices. 

The following example is provided to clarify this subject. Assume the bus being 
monitored has Initiators as ID 6 and ID 7 and Targets as ID 0, ID 1 and ID 2. You might 
think that you could capture all traffic to Target ID 1 from both Initiators. However, if 
you try this by setting only bit number 1 in the pattern, that pattern will never be matched, 
since both the Initiator’s and Target’s ID numbers are set during Selection phase. 

You might also try setting bits 1, 6 and 7. That will not work either, since only two bits 
may be set during selection phase. You can, however, capture all transactions between 
a pair of ID numbers, for example ID 0 and ID 6. You could even capture only 
transactions between ID 0 and ID 2 (although this situation would be questionable, since 
both of those ID numbers belong to Targets). 

When this function is enabled, you are allowed to set the bit pattern to match. Note that 
16 bits are provided in the pattern. This is to allow matching of SCSI WIDE Selection 
IDs. The default pattern is for ID 7 (commonly used by Initiators) and ID 0 (commonly 
used by Targets), and shows as the pattern [0081] in the menu. 

2.2.5.4 <3> - CAPTURE SELECTION ONLY 

This function enables or disables skipping of all events except transitions on the SCSI 
BSY and SEL control lines. This mode is extremely economical of trace events when all 
that is desired is to see which IDs are being most utilized, or to determine the proportion 
of idle to active time on the bus. 

2 . 2 . 5.5 <4> - CAPTURE FOUR EDGES REQ/ACK 

This function enables or disables capture of an event on any transition of the REQ or 
ACK SCSI control lines. When enabled, each transfer of information during the 
Command, Status, Message or Data phases will cause up to four events to be recorded (on 
some extremely fast systems, two of the edges may occur so close together as to be 
telescoped into one recorded event). This recording mode is very valuable in tracing 
synchronous data transfers, or when checking timing of the REQ and/or ACK signals. 

When this function is disabled, the tracer will record only one event for each byte of 
information transferred. The recording will be qualified by the edge of REQ or ACK that 
signifies valid data: the transition to active REQ for data from the Target, or the transition 
to active ACK for data to the Target. 

2.2.5.6 <5> - CAPTURE ON EXTERNAL CLOCK 

This function enables or disables recording of events qualified by an external clock input. 
When enabled, any low-going transition on expansion connector bit 0 (DB-15 type 
connector J2, pin 1) will cause recording of a snapshot of the SCSI bus (within 20 
nanosec of the transition). This mode is useful to relate the timing of signals internal in 
tested system to the contents of the SCSI bus. 



2.2.5.7 <6> - CAPTURE SCAM PROTOCOL 


This mode allows recording of events during the auto-configuration process of the SCSI-3 
SCAM Protocol. In this mode, whenever both BS Y and SEL signals are active, transitions 
on D5, D6, or D7 (the SCAM Handshake lines) cause an event to be recorded. Since 
transitions on the certain data lines cause recording (which in normal trace mode would 
be ignored), more of the trace memory is used than in the normal trace mode. 

The reader is referred to Appendix E and the SCSI-3 ANSI specification (document: 
SCSI-3 Parallel Interface ’SPT, Annex B) for detailed description of the SCAM protocol. 

2.2.6 TRIGGER SETUP 

Press the <Trig> key on the keypad to specify the trigger mode and conditions of the 
trigger event. From the PC/AT keyboard, the <T> key is a selector for this function. 
See Section 5 for a complete discussion of the Trigger Setup Menu and triggering. 

2.2.7 <1> - CLEAR TRACE 

The CLEAR TRACE function is a two-step operation. When selected, a prompt will 
appear, asking you to confirm that the trace memory should be cleared. If you press 
<Yes> on the keypad, or <Y> on the external keyboard, the trace memory will be cleared 
to all zeros. From the PC/AT keyboard, the <C> key is a selector for this function. 

2.2.8 <2> - WRITE TRACE 

The WRITE TRACE function allows you to set the contents of trace memory. For each 
event, you can specify the exact contents of the control-bits word (16 bits), data word (16 
bits) and time stamp long word (32 bits). From the external keyboard, the <W> key is a 
selector for this function. 

When you select this function, a prompt will appear asking for a starting address. You 
should type an address in hex in the range 0 - 7FFF (or 0 - 1FFFF if you have the deep 
trace option). Other values will be rejected. After specifying the starting address, a line 
will appear showing the current contents of that address’s control-bits word. The cursor 
will be positioned on the first character to allow editing. 

If you do not wish to change the contents, press the right-arrow key. Otherwise, type the 
new value and press <Enter>. The new contents will be displayed, and the cursor will 
move to the data word, as the current contents are displayed. Edit the data word just like 
the control-bits word and the cursor will move to the time stamp long word, which you 
can also edit. 

At any time, press the down-arrow key to move to the next event. Any unedited portion 
of the event at the cursor will remain as it was, and you will be able to edit the next event. 
When all is finished, press <Quit> to return to the main menu. 



2.2.9 <3> - SAVE/RESTORE TRACE 


The SAVE/RESTORE TRACE functions allow you to place some or all of the current 
recorded trace of SCSI Bus activity into a file on an external computer, or into the 
optional Trace Mirror memory. This functions also allow you to read from a previously 
stored trace back into the active trace memory for display. See Sections 2.3 for 
description. 

2.2.10 <4> - DISPLAY TRACE 

The DISPLAY TRACE function allows you to see the activity recorded while tracing. 
See Section 3 for a complete discussion of the display modes and how to interpret the 
various parts of the display. From the external keyboard, the <D> or <3> key is a selector 
for this function. 

2.2.11 <5> - SETUP DISPLAY FORMAT 

This function allows you to specify how the recorded activity is displayed. See Section 
3 for a complete discussion of the display modes. From the external keyboard, the <F> 
or <4> key is a selector for this function. 

2.2.12 <6> - FIND EVENT 

This function searches the trace memory for a particular pattern of control or data bits. 
See Section 5 for a complete discussion of the searching function. Note that searching 
is accessible from the trace display mode as well, by pressing the < A Find> key. From 
the external keyboard, the 

<Ctrl-F> key combination is a selector for this function. 

The FIND-NEXT function repeats a previous search for the next matching event. If no 
previous search was made, it searches for the next Bus Free event. Note that this function 
is also accessible from the trace display mode, by pressing the < A FndNxt> key. From 
the external keyboard, the <Ctrl-L> key combination is a selector for this function. 

A FIND-PREVIOUS function is also available. Press < A FndPrv> to select it. It is 
similar to FIND-NEXT, but it searches backwards through the trace. From the external 
keyboard, the < A K> is the selector for this function. 

The FIND EVENT function can use a occurence count, i.e. you can find the n-th 
occurence of a certain event. The FIND-NEXT or FIND-PREVIOUS will always find 
the next first occurence, however. 

2.2.13 <7> - CALCULATE TIME DIFFERENTIAL 

This function allows you to select two trace events by specifying their addresses, and 
calculates the elapsed time between the two events. It uses the 20 nanoseconds resolution 
timestamp. Note that the time in nanoseconds is approximately modulo 170 seconds, due 
to timer counter wrap-around. In other words, if the two events are actually 175 seconds 
apart, the difference reported will be approximately 5 seconds. 



This function is also accessible from the trace display mode by pressing the < A Time> 
key. From the external keyboard, the <Ctrl-T> key combination is a selector for this 
function. 


2.2.14 <8> - UTILITIES 

This function allows access to utility functions which do not fall into any other category. 
See Section 7 for a complete discussion of the miscellaneous utility functions. Press the 
<Util> key to access this function. From the external keyboard, the <U> key is a selector 
for this function. 

2.2.15 <9> - SCSI EMULATOR 

Press the <9> or <E> key to enter the SCSI Emulator menu. See Section 6 for a detailed 
description of all of the SCSI Initiator Emulator functions. 

2.2.16 <A> - USER PROGRAMS 

Press <A> to start a user program. Such programs include ANTEST (a package, sold as 
an optional disk testing utility by ANCOT), other user programs provided by ANCOT, 
or programs developed using the C cross compiler developed by ANCOT. (See section 
9.2.2 for more information on the cross compiler.) 

Pressing <A> results in another option menu. 

USER PROGRAM MENU 


<0> - EPROM 

<1> - SRAM (load first) 

<2> - SRAM (restart) 

<3> - EEPROM (load first) 

<4> - EEPROM (restart) 

Your selection (0../Quit) ? 

Using this menu, you can choose: 

0 - to start a program resident in EPROM in the expansion socket, 

1 - to download from host and start a program in SRAM, 

2 - to restart (earlier down-loaded) program in SRAM, 

3 - to download from host and start a program in EEPROM, or 

4 - to restart (earlier down-loaded) program in EEPROM. 

The EPROM (128KBytes) is a non-volatile storage to hold SCSI target test utility programs. The 
socket for this EPROM is next to the program (Firmware) EPROM inside of the DSC-216. 

The SRAM (96KBytes in all models shipped since beginning of 1994) is a volatile storage area. 
It can hold program(s), but is cleared after power up. 




The EEPROM (up to 6KBytes) can hold smaller programs which are saved until written over. 

Programs are downloaded from the host into the DSC-216 using the serial port, at connector J3. 
You will need a communications package, such as PROCOMM or PLPLUS, on your host 
computer that is capable of transmitting files in ASCII format. Also, the file must be written in 
Motorola S-record format in order to be executed on the DSC-216. The cross-compiler available 
from ANCOT produces S-record format files. Finally, you will need a null modem cable 
(supplied by Ancot in accessories kit) to connect your host computer’s serial port to the DSC-216 
J3 connector. See section 7.3.10 for instructions on setting the serial port (J3) parameters. 

To download a program from the host, first start your communications program on the host 
computer, and set the serial port configuration to match the serial port in the DSC-216. Get 
everything ready so that a single keystroke will start transmitting the file, but do not start 
transmitting yet. 

Next, get the DSC-216 ready to receive the file. Do this by selecting a user program from the 
USER PROGRAM menu as described above, and choose either SRAM (selection <1>) or 
EEPROM (selection <3>) as the target of the loading operation. Message "Load S-Records now" 
will be displayed on the DSC-216 screen as an indication that the DSC-216 is waiting for the 
downloading to start, and a counter will appear showing the number of S-records transferred 
(counting from 0). 

Now press the appropriate key on the host (<PgUp> for PROCOMM) to start the transfer. This 
order of operations is important because some communications programs start by issuing an 
initialization string to the modem presumed to be connected. Such strings contain characters 
which could be interpreted as S-records, and this could confuse the software in the DSC-216. By 
starting the communications program before setting the DSC-216 to receive, the buffer holding 
any initialization string is flushed out before the file is sent. 

If the transfer process seems to hang at the end, you may need to send ASCII character EOT 
(value 4) from your communications program. You can usually do this by pressing <Ctrl-D> on 
the host. When the entire file has been transferred, the program will start automatically on the 
DSC-216. You may need to tell your communications program that the transfer is complete (for 
example: Press <Esc> if using PROCOMM). 

The downloading process is very similar to downloading the trace ("restoring trace"). You may 
read Appendix H. for an example of using the PC and the PROCOMM PLUS program for saving 
and restoring the trace. 



2.3 SAVE/RESTORE TRACE FUNCTIONS 

Choosing the <3> from the system main menu results in the display of the following. 


SAVE / RESTORE TRACE MENU 


<0> - Save trace to host via serial port 
<1> - Save trace to host via parallel port 
<2> - Save trace to onboard mirror memory 
<3> - Restore trace from host via serial port 
<4> - Restore trace from host via parallel port 
<5> - Restore trace from onboard mirror memory 

Serial port setup: 9600 8N1 
Your selection (0../Quit) ? 

You will need a null-modem cable connecting the DSC-216 (serial port - connector J3) to your 
external host computer to use serial save/restore. If using the parallel port, you will also need an 
IBM PC or compatible, the special Ancot parallel transfer utility program operating on the PC, 
and the special Ancot Parallel Cable Adapter to use parallel save/restore. You will also need the 
optional Trace Mirror memory in your DSC-216 to use one of these functions. Selecting the 
method and direction of trace transfer results in other prompts and menus to lead you through the 
process. 

Only the Raw Data format can be restored from a host computer file back into the DSC-216’s 
trace memory. The other ‘save file’ formats are provided for human-readable archiving. A utility 
is available in a C-source and IBM PC executable format for converting from Raw Data to human 
readable format. Contact the factory to obtain this utility. 

2.3.1 <0> - SAVE TRACE TO HOST VIA SERIAL PORT 

You can transfer and save a trace captured by the DSC-216 to a file on a host computer for later 
post processing or archival purposes. 

At the host computer end, you will need a communications program capable of transferring ASCII 
files and storing them using the host computer file system. Most UNIX systems provide these 
programs as system utilities. Apple Macintosh systems and MS-DOS systems will require an 
add-on program. BITCOM or PROCOMM are perhaps the most popular of these programs for 
the PC. 

The DSC-216 needs to be connected to the host computer using a null-modem cable. See 
Appendix A.4 for the pinout. Make sure the connections are made and the host is setup for the 
same baud rate and data format as the DSC-216, as indicated in the SAVE/RESTORE TRACE 
menu, line just above the "Your Selection ?" line. In the example on the previous page, serial port 
setup is shown as "9600 8N1", which indicates: 


9600 baudrate, 8 data, No Parity, and 1 Stop bit. 




Select <0> from the SAVE/RESTORE TRACE menu and you will be given a choice of file 
formats to transfer. The following menu will be displayed: 

FILE FORMAT MENU 


<0> - Raw trace data format 
<1> - Structured format 
<2> - Binary format 
<3> - Hex Dump format 
<4> - Compressed format 

Your selection (0../Quit) ? 

The Raw Data’ format is the only format which can be downloaded back into the DSC-216 at a 
later time. This is an encrypted format which ensures that all characters are printable ASCII. See 
Appendix C for a description of the encryption algorithm. 

The other formats are text files which are duplicates of the trace display formats, identical to 
what appears on the screen of the DSC-216. These formats may be useful for comparisons and 
post-processing of the trace information, but cannot be reloaded into the DSC-216. Note that this 
format is not compressed, and files are much larger than the Raw Data’ format; for this reason, 
post-processing of ’NON-Raw Data’ formats will typically take much longer. 

After you select the format, you will be asked for the trace memory range to be saved, then 
confirm the transfer by pressing <Yes> to start communications. Most communications programs 
can be set to echo received characters to the screen, so you can follow the transfer as it is 
progressing. 

The transfer is completed when the EOT character (04 Hex) is sent to the host. When the EOT 
is finally received, disable reception at the host end. This will automatically close and save the 
file with most communications packages. 

See Appendix H for an example of using the PC and the PROCOMM PLUS communication 
package for saving the trace on a PC host. 

2.3.2 <1> - SAVE TRACE TO HOST VIA PARALLEL PORT 

The parallel port allows faster data transfers, therefore it may be desirable when handling larger 
files. 

You will need a receiver utility at the host computer to use the parallel port. Ancot will provide 
on request such a utility for the IBM PC/AT or newer (or compatible) computers. The host 
computer must also have a bi-directional parallel port. See Appendix G for more detail. 




2.3.3 <2> - SAVE TRACE TO MIRROR MEMORY 

You may save a trace captured by the DSC-216 in a FLASH ROM based Trace Mirror memory 
- if you have this option on your unit. The Trace Mirror memory is non-volatile and therefore you 
can turn off your DSC-216 (for transport), and later restore the same trace back to the trace 
memory for examination. Proceed as follows: 

Select the SAVE TRACE function in the main menu (selection <3>), and you will be asked for 
the address range from trace memory to be saved. You will also be asked for the address in 
Trace Mirror memory where the trace saving should start. If you type in a Trace Mirror address 
which is not on a 128 byte boundary, the address you select will be rounded up. If the address 
range from the trace memory is not a multiple of 128 events, that will also be rounded up. The 
program will then attempt to write the trace data into the Trace Mirror memory. If it is successful, 
you will be informed of any change in addresses used within the Trace Mirror memory. If the 
transfer fails, you will be informed of that also. You should make a note of the addresses within 
the Trace Mirror which are in use. 

Read more on the Trace Mirror memory option in Appendix F. 

2.3.4 <3> - RESTORE TRACE FROM HOST VIA SERIAL PORT 

A trace saved to a file in Raw Data’ format can be loaded back into the DSC-216 trace memory 
for more study. This function is analogous to saving the trace, as described in Section 2.3.2, 
except that the direction of transfer is different. 

Connect the DSC-216 to the host using a null-modem cable. At the host computer end, start the 
communications program and ready it to send an ASCII file. 

Select <3> from the SAVE/RESTORE TRACE menu and the following prompt will be 
displayed: 


Download (receive) trace in [Raw Data] format. 

Start Transfer (Y/N) ? 

Press <Yes> to confirm, then start the transfer from the host end. 

Some care has been taken to ignore any modem initialization characters your 
communications package may send out before the actual file, but it is impossible to allow 
for every possibility. If you repeatedly get the message "Unrecognized format” when 
attempting downloads, disconnect the null-modem cable until the next keystroke at the 
host end that initiates the transfer. 

Note again, that only the Raw Data format’file can be reloaded into the DSC-216. Any other file 
format will result in the "Unrecognized format" message. 


See Appendix H for an example of using the PC and the PROCOMM PLUS communication 
package for restoring the trace from a PC host. 



2.3.5 <4> - RESTORE TRACE FROM HOST VIA PARALLEL PORT 


A trace saved to a file in Raw Data’ format can be loaded back into the DSC-216 trace memory 
for more study. This function is analogous to saving the trace, as described in Section 2.3.2, 
except that the direction of transfer is different. See Appendix G. 

2.3.6 <5> - RESTORE TRACE FROM MIRROR MEMORY 

A trace saved to the Trace Mirror memory can be restored back into the DSC-216 trace memory 
for more study. This function is analogous to saving the trace, as described in Section 2.3.3, 
except that the direction of transfer is different. When restoring the trace proceed as follows: 

Select the RESTORE TRACE function in the main menu (selection <3>), and you will be asked 
for the address in Trace Mirror memory where the trace segment starts and where it ends (deault 
is the full segment length). The segment of the trace will be restored to the trace memory starting 
at location zero (address 0). Any consecutive restore will overlay the previous trace. In other 
words, only a single restored trace can be examined at a time. 

Read more on the Trace Mirror memory option in Appendix F. 



SECTION 3 


DISPLAYING THE TRACE MEMORY 
3.1 INTRODUCTION 

The DSC-216 has several display formats for the data captured by tracing. Each format has its 
own characteristics and special capabilities to let you view the events recorded. See appendix E 
for a discussion of the SCSI-3 SCAM protocol and its display on the DSC-216. 

When you select the <Display> option from the main menu, a message will appear showing 
which format of display is currently selected, and prompting for a starting address. You may 
select a different display format at this point; just press the <No> on the built-in keypad, or <N> 
from an external keyboard. The Display Format menu will appear, as described in section 3.7. 

To start the display, select a starting (and optionally an ending) address in any of the formats 
which follow. Addresses must be in hexadecimal in the range 0-7FFF (0-1FFFF or 0-7FFFF if 
you have the optional 128K or 512K deep trace). The address must also be within the recorded 
range i.e. less than the address at which recording stopped, as reported when you pressed <Stop>, 
or the trigger occurred. If you type an address out of range, it will be rejected and you will be 
given another opportunity to select an address. 

1. Press <Enter> with no numeric entry to start displaying at the start of trace 
memory, with a pause at the end of each page displayed. 

2. Type an address and press <Enter> to display one page beginning at the address 
typed. 

3. Type two addresses separated by a hyphen (-) and press <Enter> to display the 
entire range of events between and including the two addresses. This is the option 
you may want to select if you are printing a trace in hard copy through the parallel 
port, and you need to print more than one screen. 

4. Type an address followed by a hyphen (-) and press <Enter> to display all events 
from the address typed to the end of trace. 

5. Type a hyphen (-) followed by an address and press <Enter> to display all events 
from the start of trace up to and including the address typed. 

6. Type just a hyphen (-) and press <Enter> to display the entire recorded trace. 

Displaying within a range longer than one screen length would usually be used when also 
generating hard copy on a printer. Use <Ctrl- A Print> key on the keypad or < A P> on the external 
keyboard to toggle the printer ON and OFF. 

After the initial display, the DSC-216 will pause for more input from you. At that time, you can 
access the Search functions (see section 5), the Time difference calculator (see section 2.2.13), 
the Trigger (section 4), the Trace-Mode (section 2.2.5) or Utilities (section 7) menus. You can 
also continue displaying with the following options. 



1. Press <Next> from the keypad, <Space> or <PgDn> key from the keyboard to 
display the next full page of trace memory in the current format. 

2. Press <Prev> from the keypad or <-> from the keyboard to display the previous 
page of trace memory in the current format. The <PgUp> key also accomplishes 
this action. Note that in the structured format, because of the unpredictability of 
the number of events making up one page of display, moving backward may not 
always go exactly one page so the display may scroll to reach the correct place for 
the start of page. However, in the other formats, page length is determinate, and 
moving backward goes exactly one page at a time. 

3. Press a number from <1> to <9> to display that many more lines forward in the 
current display format. This series of lines becomes the entire new page, although 
the full 25 lines will appear on the screen. 

4. Press <Home> to display one page starting at the beginning of trace. 

5. Press <End> to display (about) a page starting about half page before end of trace. 

6. <A> allows entry of a starting address for the next page to be displayed. 

7. Press the <16-8 bit> key on the keypad, or the <W> key on the external keyboard, 
to flip between wide (16-bit) and narrow (8-bit) data display. Note that wide data 
can only occur during a Data-In or Data-Out phase, and only that part of the 
display is affected. When displaying wide data, the low byte appears first, 
separated by a hyphen from the high byte. The separator character may be an 
asterisk (*) if a parity error occurs or a plus-sign (+) if the ATN line is active. 

8. Press the <Alph-Hx> key on the keypad or the <H> key on the external keyboard 
to flip between ASCII representation and hexadecimal display of data bytes. This 
will only affect the Structured display. When displaying data in ASCII format, 
unprintable characters will appear as periods (.). 

9. Press the <Flip> key on the keypad or the <F> key on the external keyboard to 
toggle between the Structured and Binary display formats. The page displayed 
will start at the same address as did the one being replaced. 

10. Press <C> (or <Alt-C> on the keypad) to ’flip’ to the Compact Display format. 
The trace display will start at the same address as the page being replaced. 

11. Press <D> (or <Display> on the keypad) to ’flip’ to the Hex Dump display format. 
The trace display will start at the same address as the page being replaced. 

12. Press <P> (or <Pause> on the keypad) to ’flip’ to the Command profile display 
format. The trace display will start at the same address as the page being 
replaced. 


13. While displaying in Binary format, press < A BinFmt> on the keypad or < L > on 



the remote keyboard to toggle between character display and state line display. 

14. In the Binary format, press < A TmFmt> key on the keypad or <E> on the external 
keyboard to switch between total elapsed time (since start of tracing) and 
differential time (between successive events). In the Structured format, this key 
enables/disables the display of timing information. 

15. While displaying in Structured format, press <E> (or <Alt-E> on the keypad) to 
add the time stamp on the right margin of the screen. In Structured display this 
always indicates time differential. 

3.2 THE STRUCTURED DISPLAY FORMAT 

This format is the easiest to read and interpret. Each line of display starts with the trace memory 
address of the first event of the line. Each SCSI phase is labeled with its name. In addition, the 
first byte of the Command Descriptor Block (CDB) is interpreted, as are each Message byte and 
Status byte. Phases are indented as with program structure. 

The Reset condition and Bus Free phases are aligned with the left edge of the display after the 
address. Arbitration, Selection and Reselection phases are indented one tab stop, 3 spaces. 
Command, Status, Message-In and Message-Out phases are indented a further tab stop, 6 spaces. 
Data-In, Data-Out and the two Reserved phases are indented another tab stop, 9 spaces. 

The actual data transferred, as well as the ID numbers during Arbitration, Selection and 
Reselection, are shown in Hex, following a slash. If a parity error occurs at any time (except 
in arbitration phase), an asterisk will follow directly after the offending byte. If no parity error 
occurred, but the SCSI ATN line is active, that is shown as a plus-sign following the byte. Data 
count, i.e. number of transfers during the Data-In or Data-Out phase is shown in Hex format and 
in parentheses just after the trace memory address for the last line of the data phase. 

NOTE: 

There are situations when the tested system hangs during the data phase, and you need to find out 
how many data bytes were actually transferred. Normally, when the system hangs, you press 
<Stop> or <S> to stop the tracing, then <Esc> to exit to main menu, and <D> to display the 
trace. 

You will not see the data count (in parentheses) at the end of the last (hung) data phase on the 
structured display. This is because the data count is recorded in the trace memory when Bus Free 
phase is entered. (DSC-216 stores data count in the data byte memory of the Bus Free event. This 
recording is all done by Hardware because of the recording speed requirement. If you need to see 
the data count, press the SCSI RESET pushbutton to reset the Target before you press <Stop>, 
and this will result in Bus Free phase, and subsequent recording of the data count in the trace 
memory. 

To avoid clutter, multi-byte messages have the phase label only on the first byte. Multi-line data 
phases similarly are labeled only on the first line. 


When enabled, the duration of each phase is displayed on the last line of that phase (if space is 



available on the line). Press < A TmFmt> to toggle between timing display enabled/disabled 
(press <E> on the external keyboard). 


Several samples of Structured displays, showing the various recording and display modes, follow. 

3.2.1 Structured Display with NARROW or WIDE data transfers 

The example display below shows the data in ASCII format. Recording captured all data. This 
recording was made with ’capture 4 edges REQ/ACK’ mode turned OFF. Note that in line 4 the 
IDs of the SCSI devices involved are shown both as the bits set on the SCSI bus, and as the 
decimal equivalent ID numbers of the two devices. 


Also note that, during the first Message-Out phase, the Initiator held ATN active as shown by the 
(+) following each message byte. This trace shows a typical boot sequence for a host adapter card 
at ID 7 finding out about the Target device at ID 0. 


00000: —- Start Trace 
00001: Arbitration /80 (7) 

00004: Select w/ATN /81 (0,7) 

00007: Message-Out/C0+(Identify : LUN 0 Disconnect OK) 

00008: Message-Out/01+(Ext Msg) 

00009: 03+(Length) 

0000A: 01-KSDTR) 

0000B: 28+(Period 160 nsec) 

0000C: 08 (Offset 8 bytes) 

0000D: Message-In /01 (Ext Msg) 

0000E: 03 (Length) 

0000F: 01 (SDTR) 

00010: 32 (Period 200 nsec) 

00011: 08 (Offset 8 bytes) 

00012: Command /12 00 00 00 30 00 (Inquiry) 

00018: Data-In/. ANCOT 

00028: D S C - 3 0 2 / J 

00038:(0024) 3.40 

0003C: Status /00 (Good) 

0003D: Message-In /00 (Cmd Cmplt) 

0003E: Bus Free 

0003F: Arbitration /80 (7) 

00042: Select w/ATN /81 (0,7) 

00045: Message-Out/C0+(Identify : LUN 0 Disconnect OK) 

00046: Message-Out/01+(Ext Msg) 

00047: 03+(Length) 

00048: 01+(SDTR) 

00049: 28+(Period 160 nsec) 

0004A: 08 (Offset 8 bytes) 

0004B: Message-In /01 (Ext Msg) 

0004C: 03 (Length) 

0004D: 01 (SDTR) 

0004E: 32 (Period 200 nsec) 





0004F: 08 (Offset 8 bytes) 

00050: Command /03 00 00 00 10 00 (Req Sense) 

00056: (0008) Data-In/p. 0005E: Status /00 (Good) 

0005F: Message-In /00 (Cmd Cmplt) 

00060: Bus Free 

00061: Arbitration /80 (7) 

00064: Select w/ATN /81 (0,7) 

00067: Message-Out/CO (Identify : LUN 0 Disconnect OK) 

00068: Command /00 00 00 00 00 00 (Test U Rdy) 

0006E: Status /00 (Good) 

0006F: Message-In /00 (Cmd Cmplt) 

00070: Bus Free 

00071: Arbitration /80 (7) 

00074: Select w/ATN /81 (0,7) 

00077: Message-Out/CO (Identify : LUN 0 Disconnect OK) 

00078: Command /25 00 00 00 00 00 00 00 00 00 (Rd Cap) 

00082: (0008) Data-In/. 

0008A: Status /00 (Good) 

0008B: Message-In /00 (Cmd Cmplt) 

0008C: Bus Free 
0008D: —- End of Trace 

Press <E> to enable / disable display of the time stamp on the right margin. The format is the 
same as in the binary display, and it gives / specifies time for that certain phase. 

The time stamp will not be displayed if there is no room on the right side of the screen, as with 
the data phase. To show time for the data phase, the byte count has to be short enough, e.g. by 
using recording mode with "skip data after 8 bytes" option. 


00060: Bus Free 

354 934 680 

00061: 

Arbitration /80 (7) 

3 560 

00064: 

Select w/ATN /81 (0,7) 

833 600 

00067: 

Message-Out/CO (Identify : LUN 0 Disconnect OK) 

589 920 

00068: 

Command /00 00 00 00 00 00 (Test U Rdy) 

2 061 040 

0006E: 

Status /00 (Good) 

1 061 720 

0006F: 

Message-In /00 (Cmd Cmplt) 

663 920 

00070: Bus Free 

3 415 120 


When viewing WIDE data transfers, press the <16-8bit> or <W> key on the keypad or keyboard 
respectively to toggle this display option. The WIDE data in the data-in/out phase will be shown 
as two bytes (the low byte first) separated by a hyphen. If the recording was made on a 
NARROW system, the upper byte (not driven) will be marked by an asterisk, indicating parity 
error. 


00187: Bus Free 

00188: Arbitration /01 (0) 

0018A: Reselection /81 (0,7) 

0018D: Message-In /80 (Identify : LUN 0) 

00191: Data-In /DE-E7 D4-D8 FD-FF DE-80 FD-D7 33-AD CF-77 D8-39 





001D1: (0200) BA-6F 76-77 FE-7D B9-1E C3-F7 EF-E6 D7-8A EA-EC 
0020F: Status /OO (Good) 

00213: Message-In /OO (Cmd Cmplt) 

00217: Bus Free 


3.2.2 Structured Display with NARROW data transfers 

This display is shown here with data in Hex. Recording was done in Skip-Data (32 transfers) 
mode, with ’capture 4 edges REQ/ACK’ mode turned ON. Note the byte count (in parentheses, 
in Hex format) on the last line of the data phase for each transfer. 


00000: — Start Trace — 

00001: Arbitration /80 (7) 

00004: Select w/ATN /81 (0,7) 

00008: Message-Out/CO (Identify : LUN 0 Disconnect OK) 

0000C: Command /08 00 00 00 01 00 (Read/Rev) 

00023: Message-In /04 (Disconnect) 

00027: Bus Free 

00028: Arbitration /01 (0) 

0002A: Reselection /81 (0,7) 

0002D: Message-In /80 (Identify : LUN 0) 

00031: Data-In /00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 

00071: (0200) 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 

000AF: Status /00 (Good) 

000B3: Message-In /00 (Cmd Cmplt) 

000B7: Bus Free 

000B8: Arbitration /80 (7) 

000BB: Select w/ATN /81 (0,7) 

000BF: Message-Out/CO (Identify : LUN 0 Disconnect OK) 

000C3: Command /08 00 00 22 01 00 (Read/Rev) 

000DA: Data-In /FF FF FF F7 FF FF 7F 15 FE FF FF FF FF FF F7 6F 

0011A: (0200) FF FF FF FF FF FF FF FF BB FF FF FF FF FF FF 9F 
00158: Status /OO (Good) 

0015C: Message-In /OO (Cmd Cmplt) 

00160: Bus Free 

00161: Arbitration /80 (7) 

00164: Select w/ATN /81 (0,7) 

00169: Message-Out/CO (Identify : LUN 0 Disconnect OK) 

0016C: Command /08 00 00 5C 22 00 (Read/Rev) 

00183: Message-In /04 (Disconnect) 

00187: Bus Free 

00188: Arbitration /01 (0) 

0018A: Reselection /81 (0,7) 

0018D: Message-In /80 (Identify : LUN 0) 

00191: Data-In /DE E7 D4 D8 FD FF DE 80 FD D7 33 AD CF 77 D8 39 

001D1: (4400) BA 6F 76 77 FE 7D B9 IE C3 F7 EF E6 D7 8A EA EC 
0020F: Status /00 (Good) 

00213: Message-In /00 (Cmd Cmplt) 

00217: Bus Free 

00218: —- End of Trace —- 



3.2.3 Structured display of SCAM Protocol: 

In the structured display, you will see the SCAM Protocol in simple English. A sample is shown 
below. During the Isolation phase, it is assumed that the identification string (after the ’type’code 
bytes) is printable ASCII, and is displayed that way. For the ’type’code, and for any non-printable 
character, the value is displayed in Hexadecimal between angle brackets <xx>. 

Function codes are displayed both in Hexadecimal and in English. The Isolation phase is labeled 
as either Terminated’ or ’Complete’. Command codes are given in English. In all cases, if an 
illegal handshake occurs, it is labeled as such. One example is at the end of the SCAM process, 
when the Master releases C/D. 

00000: — Start Trace — 

00001: RESET Start 
00002: RESET End 
00002: Bus Free 
00004: Arbitration /(no ID) 

00005: SCAM Selection 

0000B: SCAM Function : IF Synch Pattern 

00011: SCAM Function : 00 Assign ID 

00017: Name : <12><00>Ancot SCAM Test 00001 (Complete) 

000F8: Assign ID 00 

000FE: SCAM Function : Invalid handshake 

00102: Bus Free 

00103: —- End of Trace 

Note that in order to analyze the SCAM Protocol, the trace needs to be recorded in the ’Capture 
SCAM Protocol’ mode first. See sections 2.2.5 and 22 . 5.1 for more. 

3.3 THE BINARY DISPLAY FORMAT 

If the Structured display format is compared to a computer program written in a high-level 
language, the Binary display format is like the same program written in assembly language. In 
the Binary format, each event captured gets one line of display. In this display format, you can 
see the exact state of each SCSI control line at the time of the event’s capture, plus the state of the 
SCSI data lines and the ANCOT expansion lines. Furthermore, the timing of the activity is 
shown, accurate to the 20-nanoseconds resolution of the DSC-216. 

There are several options in how the information is presented in the Binary format. 

First, the control lines can be shown in logic analyzer style, as a rectangular waveform traveling 
down the page. In this format, an active signal is shown as a thin line on the right side of the area 
dedicated to that control line. Inactive signals show as thick lines on the left side of their 
respective areas. Alternatively, you can set the display to be character-based. Active signals 
show as a mnemonic character, while inactive signals show as periods. 

The mnemonics are shown in the table below. This option is toggled by pressing the 
<Ctrl+ A BinFmt> key on the front panel, or <L> from an external keyboard. 



Signal: 

Character: 

BSY 

B 

SEL 

S 

ATN 

A 

RST 

R 

MSG 

M 

C/D 

C 

EO 

I 

REQ 

R 

ACK 

A 


The REQ and ACK signals use the same symbol (R’ or ’A 5 ), but can be distinguished from the 
RST and ATN signals by their position on the display. 

Data can be shown as wide or narrow. If the wide data format is chosen, then the low byte is 
shown first, separated from the high byte by a hyphen (-). If a parity error occurred, that is 
shown by an asterisk (*) following the offending byte. The asterisk (*) may replace the hyphen 
(-) separating the two bytes. The bytes are shown in hexadecimal first, followed by their ASCII 
equivalent in parentheses. 

Each line of display also shows the state of the three signals received through the expansion 
connector J2 (DB-15) marked as ’Exp’ in the examples below. E2 is the most significant bit, 
shown on the left of the triad. It is followed by El and then EO. 

Time stamp information comes in either of two formats also. In the [Total] format, the total 
elapsed time since the start of the recording (modulo about 170 seconds) is shown in the time 
column. In the [Diff ] format, the time differential from the preceding event is shown in the time 
column. All times are expressed as decimal nanoseconds, with a space between each group of 
three digits. As an example, the "3 123 456 789" represents 3sec 123ms 456us 789ns. 

Each line of display shows whether the data byte on that line is valid. If it is valid, then the 
address (on the left) is followed by a right angle bracket (>). If not, the address is followed by 
a colon (:). 

The various display options are shown in the following sample displays. 

This first display example shows the logic analyzer style of control signals, with 8-bit data and 
differential time display. This trace also shows ’capture 4 edges REQ/ACK’ and ’capture-all-data’ 
mode of recording. Note that the data word at the Bus Free event after the command, holds the 
data count (0008 bytes) in the data-in phase of this command. 

Just to the right of the Exp column, during the data phase only, the current REQ/ACK offset is 
shown as a 2-digit hexadecimal number. This number is valid only if the display started at (or 
before) the start of the data phase. The number is generated from the recording of the REQ and 






ACK signals in the data phase; if the recording mode does not include 4-edge capture, or if 
Skip-Data is enabled, the offset is not shown. 


BSY SEL ATN RST MSG I/O C/D REQ ACK Ph Data/PE Exp 


00000 

00001 

. 

Start Trace 

II- II II II II II 

| | Arb 80 (.)000 

0 

00002 



II l| 80 0)000 

2 840 

00003> _ 

III 1 1 1 

| | 81 0)000 

1620 

00004 

1- 

1 Ml II II II 

1 | Sel 81 0) 000 

160 

00005 

i 

J 1 

I 81 0)000 411400 

00006 

1 

1 Ml II- II II- 

||_ I 00* 0)000 

180 


00007 

00008 

00009 

0000A 

0000B 

0000C 

0000D 

0000E 

0000F 

00010 

00011 

00012 

00013 

00014 

00015 

00016 

00017 

00018 

00019 

0001A 

0001B 

0001C 

0001D 

0001E 

0001F 

00020 

00021 

00022 

00023 

00024 

00025 

00026 

00027 

00028 

00029 

0002A 

0002B 

0002C 


I I || _ MO 00 (.)000 273 520 

I J I CO (.) 000 3 400 

I | J CO (.) 000 27 700 

II _ I CO 0)000 80 

I | _ Cmd 00* (.) 000 563160 


J I 

ii 

J I 


III- 

J I 

'n' 

J I 

y 

j i 

L' 

.Oil 


03 0)000 
03 0)000 
03 0)000 
00 0)000 
00 0)000 
00 0)000 
00 0)000 
00 0)000 
00 0)000 
00 0)000 
00 0)000 
00 0)000 
00 0)000 
00 0)000 
00 0)000 
10 0)000 
10 0)000 
10 0)000 
10 0)000 
00 0)000 
00 0)000 
00 0)000 
00 0)000 


14 260 
16 840 
60 

203 040 
60 

31 040 
80 

32 840 
40 

31 060 
60 

32 840 
40 

31 060 

60 

32 840 
40 

31 060 
60 

32 840 
40 

31 060 
60 


I ||_ DI 70 (p) 000 01 1594 920 

J I 

y 

J I 

y 

j i 


70 (p) 000 00 
70 (p)000 
70 (p)000 
00 (0 000 01 
00 (0 000 00 
00 (0 000 
00 (0 000 
06 (0 000 01 
06 (0 000 00 


2 560 
25 440 
60 

54 440 
40 

27 960 
60 

54 440 
20 


Time 











0002D: I | 
0002E: I | 
0002F: I | 
00030: I 
00031: I 
00032: I 
00033: I 
00034: I 
00035: I 
00036: I 
00037: I 
00038: I 
00039: I 
0003A: I | 
0003B: I | 
0003C: I | 
0003D: I | 
0003E: I | 
0003F: I | 
00040: I 
00041: I 
00042: I 
00043: I 
00044: I 
00045: I 
00046: I 
00047: I 
00048: I 
00049: I 
0004A: J || 
0004B: | | 


I I II J 06 (.)000 28 000 

I |_ | 06 (0 000 80 

I | I ||_ 00 (0 000 01 54 420 

I J I 00 (0 000 00 60 

I | J 00 (0 000 27 940 

I I _ I 00 (0 000 80 

I I | _ 00 (0 000 01 54 420 

I J I 00 (0 000 00 60 

I || J 00 (0 000 27 940 

I 1 _ I 00 (0 000 80 

I I | _ 00 (0 000 01 54 420 

I J I 00 (0 000 00 60 

I 1 J 00 (0 000 27 940 


1 1 

II 00 (.) 000 

80 

» m 

00 (.) 000 01 

54 440 

ii j 

1 00 (.) 000 00 

40 


J 00 (.) 000 

27 960 


il 00 (.) 000 

60 

I a 

00 (.) 000 01 

54 440 

i 

1 00 (.) 000 00 

20 

r . 

J 00 (.) 000 

28 000 


II 00 (.) 000 

80 

i Hl- 

St 00 0)000 

1 084 860 

i i i 

00 (.) 000 

319 080 

Ml - 

1 00 (.) 000 

18 940 

i _ 

1 00 (.) 000 

80 

i i II- 

MI 00 0)000 

786 260 

i i i 

00 0)000 

2 580 

ill J 

00 0)000 

25 420 

i J 

II 00 0) 000 

2 420 

II II 

1 BFr 0000080) 

000 335! 


The following display example shows the character style of control signals with Wide’ data (16 
bits + parity) and total elapsed time display. This trace also shows the single-edge REQ/ACK 
mode of recording (REQ and ACK not shown) and skip data (after 8 events). 


Note also the presence of the trigger event, marked with a T’ next to the 00015 address. 


Addr: BSY SEL ATN RST MSG I/O C/D Ph Data/PE Exp Time 


00000: — Start Trace — 

00001> B.Arb 80-00*(..)000 0 

00002: B S. 80-00*(..)000 2 600 

00003> B S A . . . . 81-00*(..)000 4 220 

00004: . S A . . . . Sel 81-00*(..)000 4 360 

00005: B S A . . . . 81-00%.)000 388 240 

00006: B . A . . . . 00*00*(..)000 388 440 

00007: B . . . M . C MO C0-00*(..)000 665 280 

00008> B.C Cmd 08-00*(..)000 1 270 560 

00009> B.C 00-00*(..)000 1 490 540 










0000A> B.C 00-00*(..)000 1 554 560 

0000B> B.C 00-00%.)000 1 618 560 

0000C> B.C 01-00*(..)000 1 682 560 

0000D> B.C 00-00*(..)000 1 746 560 

0000E> B . . . M I C MI 04-00*(..)000 3 400 680 

0000F:.BFr 00*00*(..)000 3 673 280 

00010: B.Arb 01-00*(..)000 4 735 200 

00011: B S. 01-00*(..)000 4 782 420 

00012> . S . . . I . Rsl 81-00*(..)000 4 819 440 

00013: B S . . . I . 81-00*(..)000 4 820160 

00014: B . . . . I . 81*00*(..)000 4 835 840 

00015>T B . . . M I C MI 80-00*(..)000 5 264 660 

00016> B . . . . I . DI FF-00 (..)000 7 000 000 

00017> B . . . . I . FE-01 (..)000 7 002 800 

00018> B . . . . I . FD-02 (..)000 7 003 080 

00019> B . . . . I . FC-03 (..)000 7 003 380 

0001A> B . . . . I . FB-04 (..)000 7 003 660 

0001B> B . . . . I . FA-05 (..)000 7 003 960 

0001C> B . . . . I . F9-06 (..)000 7 004 240 

0001D> B . . . . I . F8-07 (..)000 7 004 540 

0001E> B .... I C St 00-00*(..)000 7 958 880 

0001F> B . . . M I C MI 00-00*(..)000 8 773 220 

00020:.BFr000008*(..)000 9139 520 

00021: — End of Trace — 














3.3.1 Binary display of SCAM Protocol: 


In the binary display format, you will see the SCAM data handshake near the horizontal middle 
of the screen. The SCAM data and handshake take the place of the normal display of data in 
Hexadecimal and ASCII. Only the SCAM Selection is interpreted in the Phase column (between 
the SCSI control lines and the data). It is shown as SCM. 

The handshake is shown as thick (active) or thin (inactive) lines for D7, D6 and D5 (left to right). 
The data is shown in binary from D4 to DO (left to right). The event with valid data is shown 
with a square bullet between the handshake and the data. An example is shown below. 

Note the short duration event at address 18. It seems that this is a spurious capture, since no 
change is evident from the preceding event. This is the "wired-or glitch" which must be filtered 
out by the software or hardware executing the protocol. 

Addr: BSY SEL ATN RST MSG C/D I/O Ph Data/PE Exp Time 

00000: — Start Trace — 

00001: II || | | _ || | || BFrOOOO 000 0 

00002: I || || J | | || RST 00 (.) 000 3 343 309 440 

00003: I_ | I | | | | BFrOOOO 000 467 080 680 

00004: l.||_.|| .|| .|| .|| .|| .Arb 00 (.) 000 676 627 320 

00005> I I II 1 I I | III 00000 000 1251826 320 

00006: I I 1 | | _ | | III 00000 000 1040 

00007> J I | || I I I III 00000 000 490 666160 

00008: | . I.|| .|| .J. | .| .SCM 00* (.) 000 995 079 400 

00009> ||_ I | | | | | Sel 00* (.) 000 1255 570 040 

0000A: ll| | | II- HI 00000 000 173 120 

0000B: ll| |||l III 00000 000 2000 

0000C: I. I. |. . |.||_.l. |ll 00000 000 5 040 

0000D: ll| | II |ll 00000 000 3220260280 

0000E: I J || | || II ||l 00000 000 1 048 575 920 

0000F> I ||_ | | | I I St CO (.) 000 1354 956 680 

00010> I. 1.1 .|| .|| .1. I. ||l 00000 000 113 200 

00011> J I II I I II III 00000 000 813 024 640 

00012> ||_ I || | | I I Rsl 80 (.)000 2 766 584 680 

00013: II II 100000 000 40 

00014: I. I. . . .1. I. 100000 000 2120 

00015: II II I |" 11111000 8 328 585 360 

00016: II III 111111000 238080 

00017: II III j 11111000 5040 

00018: I. I. . . . I. I. I j 11111000 40 

00019: II III 111111000 1007675160 

0001A: ll| I I II |l mil 000 254880 

0001B: III | | II 1111111000 964743640 

0001C: I. I. | . | . | . I. I. 1111111 000 370 920 

0001D: II II II1-00001000 4 042 006 880 

0001E: ll| | II 11100001000 233480 

0001F: ll| | II I |l 00001000 974504720 

00020: I. I.| .| .| . I. I. ||l 00001000 11320 



















00021 

1 1 



II I |l 00001 000 

5 600 

00022 

1 1 



II I jl 00001 000 

40 

00023 

1 1 



1 1 jll 00001 000 

1 048 285 480 

00024 




. 1. 1. |l 100011 000 

29 362 200 

00025 

1 1 



1 1 II1-00010 000 

2 294 179 240 

00026 

1 1 



II l||00010 000 

186 960 

00027 

1 1 



II 1 jl 00010 000 

5 960 

00028 




. 1. 1. ||l 00010 000 

6 320 

0054D 

: 1 1 



II 1 1 III 11000 000 

1 047 384 680 

0054E 

: 1 1 



J 1 |l 111000 000 

15 224 960 

0054F 

: 1 1 | 



1 1 1 |i | ooooo 000 

3 568 099 800 

00550 

1. I.| 

I | 


J .1. Ill 00000 000 

13 596 000 

00551 

> > 



J III 00000 000 

211 295 720 

00552 

1 1 



II I I III 00000 000 

225 573 840 

00553> 1 || i ]i 

1! 1 1 00 (0 000 

310 410 400 

00554: II .1 .1 .11 

J| J J .BFrOOOO 000 282 911360 

00555 

—- End of Trace —- 



Note that in order to analyze the SCAM Protocol, the trace needs to be recorded in the ’Capture 
SCAM Protocol’ mode first. See sections 2.2.5 and 2 . 2 . 5.7 for more. 


3.4 THE HEX DUMP FORMAT 

The Hex display format is very compact but also hard to read. It is intended only for the most 
intractable problems. Each line of output shows the starting address plus the contents of trace 
memory for that address and for the following two addresses, each separated by slash. 

The format of each event is : four characters of control bits, a space, another two characters of 
control bits, a space, four characters of data bits, a space, and eight characters of time stamp bits. 

The first sixteen control bits are in the order: [res, ATNO, res, ATN1 ], [TRG, E2, E1, EO], [PEH, 
PEL, BSY, SEL], [RST, MSG, C/D, EO]. The "res" in this text stands for "reserved". The 
second group of control bits are: [res, ACKO, res, ACK1], [res, REQO, res, REQ1]. 

The data bits are MSB (dl5) to LSB (dO). The time stamp bits are in their raw form : the number 
of ticks (each 40 nanoseconds long) since the recording started. 

00000: 081100 0000 75562E28 / 080100 0000 7556D1D1 / 0880 00 0080 755AD9BC 
00003: 08C0 00 0080 755ADA3E / 48E0 00 0081 755ADA8F / 0860 00 0081 
755ADA97 

00006: 08E0 00 00817571905C / 08A100 0000 75719065 / 188A 00 00C0 7571C673 
00009: 7882 00 0000 75723CA7 / 7882 OF 0000 757267A8 / 7882 CO 0000 75727428 
0000C: 7882 00 0000 757280A8 / 7882 00 0000 75728D28 / 7882 00 0000 757299A8 
0000F: 5886 00 0002 7573977C / 588E 00 0000 75743530 / 0801 00 0000 75747CBB 
00012: 0880 FE 0080 7578C115 / 08C0 FE 0080 7578C198 / 48E0 00 00817578C1E8 
e.t.c. 













3.5 THE COMPACT DISPLAY FORMAT 


The compact display format is a condensed version, which can be used for viewing the captured 
SCSI activity with up to 24 commands per screen. See section 3.7 for instructions on how to 
select this display format. Each recorded SCSI connection (from Bus Free to Bus Free) occupies 
only one line of display. You can use this format for pre-viewing a certain area of trace memory, 
then switch to the Structured Display format or the Binary Display format to see it in more detail. 

The information presented includes: 

♦ Trace Memory Address of Start of Connection 

♦ SCSI ID of Initiator and Target and direction of connection (i.e. Selection vs 
Reselection) 

♦ Command (CDB) transmitted 

♦ Number of bytes of data transferred and the direction (In or Out) 

♦ SCSI Status transmitted 

♦ Final Message of connection 

♦ Elapsed time of connection 

Note that not all connections have all these types of information. Those which do not apply are 
left blank. 

00000 : 

00001 : 

0002F 
00041: 

00052: 

00B0C: 7->0 Write/Send 000200 0 Disconnect 2 335 000 
00D1E: 7<-0 Good Cmd Cmplt 946 480 

07FFF: —- End of Trace 

3.6 THE COMMAND PROFILE FORMAT 

This format gives a graphical representation of the proportion of time spent in each phase. 
See section 3.7 for instructions on how to select this display format. One full command is 
displayed on each screen, including disconnect(s), reselection(s), all information transfer 
phases, etc. 

The heading of the display shows the trace memory address range occupied by the command, 
the SCSI IDs of the Initiator and Target, and the opcode and interpretation of the command 
transmitted. This format assumes that each command is contiguous in the trace. If 
commands are interleaved, the resulting display is unpredictable. 

The Command Total time is shown at the bottom of the screen. If one or more disconnects 
were involved in this command, then the Command Total will be shown as two values: first 
the time with disconnect included, followed by the time with disconnect excluded. 


: —- Start Trace —- 

: 7->0 Req Sense 000012 I Good Cmd Cmplt 5 297 400 
: 7->0 Test U Rdy Good Cmd Cmplt 1 406 200 

: 7->0 Read/Rev Disconnect 819 720 

: 7<-0 000200 I Good Cmd Cmplt 2 464 400 


The disconnect itself is shown on the line above the Command Total, both in raw time (in 



nanose-conds) and as a percentage of total command time (including disconnects). 


Each bar displayed also shows timing information, both in raw time (in nanoseconds) and 
as a percentage of the total (excluding disconnects) command time. 

SCSI COMMAND PROFILE 


Trace Address : 00040 - 0025B 
IDs : 17 -> TO 

Command Code : 08 Read/Rev 
Data Transfered : 512 Bytes 


Arb/Sel: 

ID Msg: 
Command: 
Data: 
Status: 
End Msg: 


71 600 ns 3.7% 

93 920 ns 4.9% 

300 560 ns 15.9% 
735 600 ns 38.9% 

286 360 ns 15.1% 

398 480 ns 21.1% 


Cmd Total: 1 886 520 ns 

The following definitions of phases are used in calculating the timing: 

Arb/Sel : From the assertion of BSY to the first event in Message-Out (for the Identify 
message). 

ID Msg: From the start of Message-Out phase to the first event which is neither Message-Out 
nor Message-In phase. 

Command : From the first event in the Command phase to the first event not in Command 
phase. 

Data: From the first event of either Data-In or Data-Out phase to the first event after the last 
event in the same phase, after subtracting any disconnect time. 

Status: From the first event in Status phase to the first event not in Status phase. 

End Msg: From the first event in the last Message-In phase of this command to the release of 
BSY (Bus Free). 

Disconnect: From the start of Message-In phase for any disconnect message to the end of the 
Message-In phase for the Identify message after reconnect. All such periods within this 
command are added together. 

Command Total: from the assertion of BSY just before the Selection phase to the release of 
BSY after the Status phase. The time not including disconnect time is also shown for 
commands which involved a disconnect. 

3.7 CHANGING THE DISPLAY FORMAT 



The display format can be changed using the TRACE MEMORY DISPLAY FORMAT MENU. 
Access this menu from the main menu by pressing the <Alt-4> key on the keypad, or the <F> key 
(for "format") on the external keyboard. You can also access this menu after pressing <Display>, 
then at the prompt for the display starting address, press <No> on the keypad, or <N> on the 
external keyboard. 

When in the TRACE MEMORY DISPLAY FORMAT MENU, use the up or down arrow keys 
to select an item to be changed, then use left or right arrow keys to change it. In a case of 
multiple choices, the left or right arrow keys will change the value by +1 or -1 respectively. 

TRACE MEMORY DISPLAY FORMAT: [Structured] 


<0> - [24] Lines per page 
<1> - Structured Display 
<2> - Binary Display 
<3> - Hex Dump Display 
<4> - Compact Display 
<5> - Command Profile 

Your selection (0../Quit) ? 

<0> - Lines per page - controls the number of lines of display that will be printed between 
keypresses. The default number of lines is 24 decimal. If you change this value, your 
selection is saved in EEPROM to become the default next time you turn the DSC-216 on. 

If you select value = 0, then display will run from the current line to the very end of the trace; 
this may be useful if you need to print the entire trace out (using the A P option). 

<1> - Structured Display - causes the next page of trace to be presented in Structured 
format. 

<2> - Binary Display - causes the next page of trace to be presented in Binary format. 

<3> - Hex Dump Display - causes the next page of trace to be presented in Hex Dump 
format. 

<4> - Compact Display - causes the next page of trace to be presented in a Compact format, 
showing one SCSI command per line. 

<5> - Command Profile - causes the next page of trace to display a timing analysis of a 
single SCSI command by phase. 

See also section 3.1 for other display options. 


SECTION 4 




SEARCHING FOR EVENTS IN THE RECORDED TRACE 


4.1 INTRODUCTION 

The DSC-216 provides a powerful, easy-to-use searching utility. This feature provides you with 
the ability to ’home in’ on the event of interest in your recorded trace, without needing to wade 
through the uninteresting events either before or after. You can specify the exact combination 
of phase and data pattern you are interested in. 

If the event exists in the trace, the corresponding part of trace memory will be displayed, and the 
found event line will be marked by ’>»»>’. If the chosen event is not found, the current display 
page will be shown again with "NOT FOUND" message in the lower right corner of the screen. 

When you select FIND, from the main menu or from a display, the following menu is displayed: 

FIND SCSI EVENT MENU 

Bus Free Phase Command Phase 

Attention Condition Status Phase 

Parity error Message-In Phase 

Arbitration Phase Message-Out Phase 

Se/ection Phase Data-In Phase 

Reselection Phase Data-Out Phase 

SCSI Reset Condition Reserved Phase (In) 

Trigger Condition Reserved Phase (Out) 

<X> - Trace PAUSE Data only (ignore phase) 

<Z> - Custom Control Bit Pattern 
xxxx xxxx 00x0 xxxx 
Your selection (0../Quit) ? 

Use the arrow keys and move the bar to the event or phase you want. For a single-key selection, 
press the selector letter (underlined on the screen) on the external keyboard. Then press <Enter>, 
and the following options menu is displayed: 

SEARCH OPTIONS MENU 

- Command Phase 

Data Bits Pattern - 

Wide data pattern [ ] 1: xxxx xxxx XX 

Forward/Backward [F] 2 : xxxx xxxx XX 

Occurrence [1] 3: xxxx xxxx XX 

Addr Range [ ]-[ ] 4 : xxxx xxxx XX 

Start Addr [ ] 5 : etc 

If the phase/event you selected allows a data pattern, the cursor will be placed in the right side, 
to edit the pattern. Otherwise, tha data pattern will be ignored. The top line, as the ’Command 
Phase’ in the example above, indicates the selected phase to be used. 


4.1.1 SELECT A CUSTOM CONTROL BIT PATTERN 





Most of the patterns are self-explanatory, but a few need additional comments. Notice as you 
move the bar through the phase selections that the bit pattern, shown below the "Custom Control 
Bit Pattern", changes to match the trace event. 

<N> - Attention condition. This event is matched when BSY and ATN are both active, and 
RST is inactive. This commonly occurs during Selection, and during extended messages, 
as well as when the Initiator needs to send a message to the Target. 

<P> - Parity error. This event is matched when BSY is active, data are valid (qualified by 
REQ/ACK for data In/Out, and during Selection and Reselection), and parity is EVEN (the 
parity error bit is set) for the low byte of SCSI data. If wide data pattern is enabled, the parity 
error bit for the high byte of SCSI data is also examined. 

<T> - Trigger condition. There is at most one matching event in any recorded trace. The 
direction flag is ignored in searching for this event. The search automatically proceeds in the 
correct direction. 

<X> - Trace PAUSE. Each time recording is paused, an artificial event (PAUSE marker) 
is written into the trace memory. 

<D> - Data only (ignore phase). This pattern ignores the state of the control lines MSG, 
C/D and I/O. However, BSY will be active, SEL and RST will be inactive, and the data 
transfer will be qualified by REQ/ACK for transfers In/Out. The data pattern specified can 
even span more than one phase. 

<V> - Reserved Phase (In) 

<U> - Reserved Phase (Out). The ANSI SCSI specification leaves undefined (reserved for 
future standardization) two of the eight possible configurations of information transfer 
phases. These patterns are matched when MSG is active and C/D is inactive, and the state 
of I/O matches the (In) or (Out). Data will also be qualified by REQ/ACK for transfers 
In/Out. 

<Z> - Custom Control Bit Pattern. Use this selection if none of the patterns matches the 
event phase you want to find. When you press <Enter> with the bar on the <Z> item, the 
following screen will be displayed: 

res ATO res ATI TRG E2 El EO PEH PEL BSY SEL RST MSG C/D I/O 
0000 0000 0000 0000 

The ATO is the ATN signal 20nsec before capture of this event. The ATI is the ATN signal 
at the time of capture of this event. The E0, El, and E2 are the signals on pins 1, 2, and 3 
of the Expansion connector J2, at the time of capture of this event. 

You can edit individual bits of the search phase pattern using the 0,1 and X keys, then press 
<Q> to return to the big menu. Move within the pattern using <LeftArrow> or 
<RightArrow> keys. 

After you select the phase pattern, you will also be given the option of selecting a qualifying 



data pattern for that same event. The SEARCH OPTIONS menu will be displayed with 
cursor waiting in the first data pattern field. The default pattern is all data as Don’t Care’ 
starting with "1: xxxx xxxx" (binary); you may specify up to 16 bytes. Change the data 
pattern or simply press <Enter> to ignore it. The cursor will move over the "Execute find" 
message. 

Press <Enter> again to execute the search. 

4.2 SELECT THE SEARCH OPTIONS 

The FIND SCSI EVENT MENU gives a list of phases and conditions to search for. It also 
lists several options to control the search. The options are explained in detail in the 
paragraphs below. 

♦ To accept the option default values: simply press <Enter> to execute the search. 
You may have to press <Enter> again if the event allows a data pattern. 

♦ To change an option default value: use the arrow keys on the keypad, or the 
selector letter on the external keyboard, to choose the option you want to modify. 
Use the <Enter> key to toggle or increment your choice. Then press <Enter> to 
execute the search. 

4.2.1 SEARCH FOR WIDE DATA PATTERN. 

This selection, <W>, will affect searches only if the Data Bits Pattern is also specified. The 
default value is a blank’, indicating that wide data pattern is not chosen. When <W> is not 
enabled, only the low byte of SCSI data will be considered in the search. If the wide data pattern 
is enabled, both the low byte (bits 0-7) and the high byte (bits 8-15) of the captured trace will be 
examined for the data pattern. 

When using wide data, bytes are assumed to arrive low byte first. The search is smart enough that 
a pattern which spans two or more transfers will be found, no matter whether the first byte of the 
pattern is in the low or high byte of SCSI data. 

4.2.2 SET THE SEARCH DIRECTION 

The currently selected direction of search is shown in square brackets: [F] for forward, [B] for 
backward. The default is forward. 

Press <F> to toggle between F (forward) and B (backward) search direction. 

4.2.3 SET THE OCCURRENCE COUNTER 

If occurrence is set to 0 or 1, the search will find the next event matching the pattern. The default 
is 1. If set to any higher number n, the search will display only the n-th event. After you choose 
<0> the cursor will move into the square brackets; type your selection and press <Enter>. The 
maximum value is 99. 


The occurrence counting is used by the FIND function when it is executed for the first time. Any 



subsequent FIND-NEXT or FIND-PREVIOUS function will search for the very first occurrence 
of the event, ignoring the occurrence counter setting. 

4.2.4 SET THE SEARCH ADDRESS LIMITS 

It might take a very long time to search for a certain item if searching over the entire trace 
memory, especially if the trace memory is 512K events long. You may need to limit the search 
range. 

The default limits are set to the beginning and the end of trace most recently recorded, and are 
shown in square brackets in the ’Addr Range [ ]-[ ]’message. 

To change the address range, press <A> and the cursor will move to the first set of brackets 
showing the default low limit address. Type a new value, then press <Enter>. The cursor will 
move to the other field and you can change the ending point of the search. Press <Enter> again 
to start the search. The analyzer will automatically reorder the start and end points if necessary. 

4.2.5 SET THE SEARCH STARTING ADDRESS 

The starting address is initially set to the same value as the address range low limit. It is updated 
everytime a successful search is executed. If you need to start searching from a different part of 
the trace memory, press <S> and type in the new starting address value. Then press <Enter> to 
start the search. 

4.2.6 SET THE DATA BITS PATTERN 

When searching for certain phases (like Command, Data-In/Out, etc), usually you may need to 
define the desired data pattern. You can specify a string up to eight bytes long. Select this option 
in the OPTIONS menu by pressing <D>. 

The cursor also moves to the data selections automatically if you select an appropriate phase to 
search for. The data bytes are displayed in both binary and hexadecimal, the default values are 
all X’ ("don’t cares"). This pattern is used along with Data, Command, and several other search 
options. 

Use the <up-arrow> or <down-arrow> keys to select the byte to edit. Use the <left-arrow> 
or <right-arrow> keys to edit within one byte. The display shows each bit of the pattern as 0,1 
or x ("Don’t care"). Change the bit under the cursor by typing a 0,1 or x, which replaces any 
value already there. To select next byte and to edit it, press the <down-arrow> key. If no byte 
is already displayed, a "don’t care" byte will be created there. 

The length of the search pattern string will be the number of bytes displayed on the screen. E.g. 
if you want to search for a string of four bytes, where only the first two bytes are defined, set the 
first two bytes, then press <down-arrow> key two times (to add the third and fourth bytes with 
"Don’t Care" pattern), then press <Enter>. The following <Enter> will execute the search. 

To delete an undesired byte, place the cursor on the byte and press <Ctrl-Display> on the keypad, 
or <Ctrl-D> on the external keyboard. 



The data pattern can also be edited in hexadecimal. Press <H> when in the bit pattern and the 
cursor will move back to the parentheses at the right. Enter a hexadecimal value. To move back 
to the binary pattern, press <H> again. Pressing <Enter> accepts the pattern as displayed. By 
pressing the <Esc> or <Q> key, you can cancel your selection (of all data bytes) at any time. 
After all bits are set, press <Enter> to exit from the edit mode, and press <Enter> again to 
execute the search. 

EXAMPLE: Searching for a READ command (6 byte CDB) at LBA=35 hex: 

Press <C> and <Enter> - this will position the cursor to the data fields. Type the first 
byte 00001000, <down arrow>, XXX00000, <down arrow>, 00000000, <down 
arrow>, 00110101, <down arrow>, <down arrow>, <Enter>, <Enter>. 

This will be displayed on the screen as follows: 

Data-In Phase 


0000 1000 

08 

xxxO 0000 

?0 

0000 0000 

00 

0011 0101 

35 

xxxx xxxx 

XX 

xxxx xxxx 

XX 


4.4 REPEATING THE SEARCH 

After a successful search, you may want to find the next event which matches the same pattern. 
To do this, press < A FndNxt> on the keypad, or <Ctrl-L> on the external keyboard. The search 
will proceed in the same direction as the previous search. You can press < A FndPrv> or 
<Ctrl-K> to search in the opposite direction. 

The FIND-NEXT or FIND-PREVIOUS functions will always search for the first next or first 
previous occurrence; these functions do not use the occurrence counter. 




SECTION 5 


TRIGGERING 

5.1 INTRODUCTION 

All triggering control stems from the TRIGGER SETUP MENU. Triggering can only take place 
when the DSC-216 is tracing, as shown by a lit Tracing’ LED on the bottom left side of the front 
panel. See section 2.2.2 for starting the trace. 

5.2 TRIGGER SELECTIONS 

Select the <Trigger> option from the main menu by pressing the <Trig> on the keypad or the 
<T> key on the external keyboard, and the following will be displayed: 


TRIGGER SETUP MENU 


<0> - Trigger type [None] 

<1> - Post Trigger delay [BFree] 

<2> - Full trace memory [ ] 

<3> - External trigger [ ] 

<4> - Parity error (low byte) [ ] 

<5> - Parity error (high byte) [ ] 

<6> - SCSI Reset [ ] 

<7> - (Re)Selection Time-out [ ] 

<8> - Selection IDs [0081] [] 

<9> - Reselection IDs [0081] [ ] 

<A> - Message code [04] [ ] 

<B> - Command code [12] [ ] 

<C> - Status code [02] [ ] 

<D> - Combine Cmd [OR ] Stat [ ] 

<E> - Transaction IDs [0081] [ ] 

Your selection (0../Quit) ? 

When the TRIGGER SETUP MENU appears, one entry will be highlighted with a bar of inverse 
video. That is the active selection. Use the <up-arrow> or <down-arrow> keys to move the 
highlight bar, or press the selector key, shown in < > next to the item you want to change. 

With the highlight bar on the item you want to change, press the <left-arrow> or <right-arrow> 
keys to cycle through the options for that item. If the item has a numerical value associated with 
it, shown in [ ], and you want to edit that value, first press the <Enter> key, then type in the new 
value in Hex, and press <Enter> key again to confirm the new selection. 

When a trigger item is enabled, the letter E’ appears in the square brackets at the right side, next 
to that item. When an item is disabled, the square brackets are empty. The first two menu items 
are exceptions to this rule. The legends which may appear in their brackets are described below. 




Triggering can be completely disabled. In this case, tracing will be started or stopped only by 
pressing the <Stop> or <S> keys. Choose the [None ] option for Trigger type. 

Tracing can be started by a trigger condition, called PRE-TRIGGER. You would use the 
Pre-trigger if you want to record SCSI bus activity from a certain (trigger) event on. As an 
example, you may want to trigger on a Check Condition (status=02) and trace your error recovery 
routine. 

Select the [Pre ] trigger option for Trigger type in the TRIGGER SETUP MENU. Then start 
tracing. In this mode, the DSC-216 monitors all activity on the SCSI bus, and records it into the 
trace memory. However, until the trigger condition occurs, the trace memory address is reset to 
0 on each Bus-Free phase, so the events are overwritten by later events. 

Finally, when the trigger condition occurs, this automatic resetting of the trace memory address 
is canceled, command which caused the trigger is retained, and all events following are recorded. 
This method ensures that the trace includes the entire command of the trigger condition. Tracing 
continues until either the trace memory is completely full or until you stop tracing by pressing 
<S> on the keyboard. 

Alternatively, tracing can be stopped by a trigger condition, called POST TRIGGER. You 
would use the Post-trigger if you wanted to record SCSI bus activity preceeding a certain (trigger) 
event. As an example, you may want to see what is causing a certain error. 

Select [Post] trigger option for Trigger type from the TRIGGER SETUP MENU. Also select the 
desired amount of Trigger delay from the trigger condition to the end of tracing. There are four 
choices for delay: 

1. Select no delay [None ], to stop tracing at the instant the trigger condition occurs. 
If you choose this option, you will not see the remainder of the command, because 
tracing will already be stopped. 

2. Select delay until Bus Free [BFree], to force tracing to continue to the end of the 
command containing the trigger condition, but not any commands after that. 

3. Select [Short] delay to see a small number of events after the trigger event. The 
number of events is set in the factory for 64 events. This amount of delay may or 
may not take the trace to the end of the current trigger command and beyond. 

4. Select [Long ] delay to see a larger number of events after the trigger event. The 
number of events is set in the factory for 2048 (2K) events. This amount of delay 
will almost always extend past the end of the current trigger command, and may 
include several commands which followed. 

The other items in the TRIGGER SETUP MENU are mostly self-explanatory. However, they are 
listed here to clarify any doubtful points. 


<0> - Trigger type : This can be [None], [Pre ] or [Post], as described above. 



<1> - Trigger delay : This item only affects Post- triggering. It can be [None ], [BFree], 
[Short] or [Long ], as described above. 

<2> - Full trace memory : When enabled (shown as [E]), the trace memory fills to the point 
where it would wrap around, then tracing stops. This ensures that all events from the point 
where tracing started are retained. 

When disabled, shown as [ ], tracing will continue with later events overwriting the first 
events in the trace memory (the trace memory acts as a FIFO). At any time thereafter, the 
most recent 32K (128K or 512K) events will be retained in the trace memory. 

<3> - External trigger : When enabled, a low-going signal at the external trigger connector 
J7 (BNC connector), is a trigger condition. 

<4> - Parity error, low byte : When enabled, a byte on the SCSI low data lines (dO-7, DPL) 
with even parity is a trigger condition. Any SCSI information transfer phase, selection or 
reselection phase is a candidate for this trigger. This trigger is not guaranteed for 
synchronous Data (In/Out) phases. 

<5> - Parity error, high byte : When enabled, a byte on the SCSI high data lines (d8-15, 
DPH) with even parity is a trigger condition if it occurs during a Data-In, Data-Out, or 
Reserved information transfer phase. Other phases are not candidates for this trigger. This 
trigger is not guaranteed for synchronous Data (In/Out) phases. 

<6> - SCSI Reset: When enabled, a transition to the active state of the SCSI RST line is a 
trigger condition. 

<7> - (Re)Selection Time-out: When enabled, a failed selection or reselection attempt is a 
trigger condition. Failed selection is defined as no response, by making BSY active, for a 
period of more than 250 milliseconds after the calling device drops BSY with SEL active. 

<8> - Selection IDs : When enabled, the pattern of data bits on the SCSI bus during selection 
is matched against the pattern shown in the first set of square brackets. If match is found, 
it becomes the trigger condition. Note that this is different from item <E> below, where the 
ID pattern is considered only in conjunction with the Message, Command or Status code. 

Note that the pattern selected for this item is duplicated for item <9>. It is not possible to 
set them for different patterns. This selection will also affect ID filtering, if that recording 
mode is enabled (see section 2.2.5). 

<9> - Reselection IDs : see <8> above. 

<A> - Message code : When enabled, the pattern of data bits on the SCSI bus during either 
Message-In or Message-Out phase is compared to the pattern shown in the first set of square 
brackets. If they match, that is a trigger condition. 

<B> - Command code : see <A> above. 


<C> - Status code : see <A> above. 



<D> - Combine Cmd [AND/OR ] Stat: This item is enabled automatically whenever both 
<B> and <C> are enabled. If the contents of the first set of square brackets is [OR ], either 
the matching Command code or the matching Status code is sufficient to cause triggering. 
If the contents are [AND], both the matching Command code and the matching Status code 
must be present in the same command to cause triggering. 

Note that a disconnect is considered a change of command. Thus a setup requiring a Read 
Command code [08] and Good Status code [00] will not be detected on a command for 
which the target disconnects. However, Command [08] and Status [02] normally will be 
detected, because most such commands will not have any disconnect. 

<E> - Transaction IDs : When enabled, the data pattern in the first set of square brackets 
MUST be present during Selection or Reselection in order for the matching of Message, 
Command or Status codes to take effect. Note that this is different from items <8> and <9> 
above, where the ID is considered independently of the other trigger conditions enabled. 

Whenever setting up trigger conditions, exercise care in your selections to avoid undesired 
synergistic effects between the conditions enabled. Consider carefully the event you are trying 
to key on, to enable properly the conditions which will trigger on that event. 

5.3 TRIGGER EXAMPLES 

5.3.1 Post-Triggering 

The problem : Target ID 2 on the bus is sending Check Condition Status even after a Request 
Sense command during the power-up sequence. This prevents the boot procedure from 
completing, and we want to find out what the cause is. 

Set the trigger conditions as follows : 

Trigger type [Post] 

Post trigger delay [BFree] 

Status code [02] [E] 

Transaction IDs [0084] [E] 

All other conditions are disabled as shown by empty brackets at the right edge of 
the Trigger Menu. 

This setup will start recording when you press <Run>. SCSI events will fill space in the buffer, 
perhaps wrapping the circular buffer, until a command occurs involving Initiator ID 7 and Target 
ID 2 (as specified by the 0084 in Transaction IDs); this will result in a Check Condition Status 
(as specified by the 02 in Status Code). 

It will continue to record until the next Bus Free phase (as specified by the Post trigger delay), 
and then stop. The final event address will be displayed on the screen as the DSC-216 informs 
you that the trigger condition has been met. You can then examine the trace to see what 
commands preceded the Check Condition Status. 



5.3.2 PRE TRIGGERING 


The problem: Some command is resulting in a condition which causes your SCSI driver to crash. 
You think it is as a result of linked commands with the flag bit set. 

Set the trigger conditions as follows : 

Trigger type [Pre ] 

Message code [OB] [E] 

All other trigger conditions are disabled as shown by empty brackets at the right edge 
of the Trigger Menu. 

This setup will start monitoring the bus as soon as you press <Run>, but will ignore all 
commands until one received with a message of Tinked-Command-Complete-with-Flag’, as 
specified by the OB in Message code. That entire command will be recorded, starting at the Bus 
Free phase preceding it. 

Events will be recorded until the trace memory is completely full, and then will stop to prevent 
overwriting the trigger event. If you press <Stop> before the memory fills up, of course that will 
also halt tracing. You can then examine the trace to determine what happened after the suspect 
event. 


5.3.3 NO TRIGGER REQUIRED 

The problem : Occasionally the bus will hang. You want to find out the IDs involved in the 
transaction hanging the bus, the command causing the hang, etc. 

No trigger is required for this problem. Set the Trigger type to [None]. Start tracing by pressing 
<Run>. The DSC-216 will record all activity on the bus, wrapping the circular buffer each time 
it fills completely. When the bus hangs, press <Stop> to halt tracing. The message will tell you 
the ending address in the trace memory. This is always the maximum trace memory address if 
the memory wrapped. You can then examine the events just before that address to find the cause 
of the hanging bus. 



SECTION 6 


SCSI INITIATOR EMULATION 

6.1 INTRODUCTION 

In many instances it is not enough to passively observe events on the SCSI bus. There are 
situations when you want to interact with certain devices on the bus, and you need to send SCSI 
commands. For this, use the SCSI Initiator emulator which gives you control over the action on 
the bus. The DSC-216/FTE (or /FDE, or /FXE) Analyzer is the model with the SCSI emulator 
built in. 

Using the emulator of the DSC-216/FTE you can act as a SCSI Initiator. You can define the 
command set matching a certain type of SCSI Target, be it a disk drive, tape drive, printer, etc. 
You control the protocol for information transfers, deciding whether to use the narrow (8-bit), 
wide (16-bit), or fast SCSI modes, or whether to act as an asynchronous/synchronous SCSI 
device. You can, via the hierarchical menu structure, determine how each command proceeds, 
and control every byte of information transferred. 

The current hardware version of the DSC-216 uses the Emulex FAS256 SCSI Protocol Controller 
chip which allows the fastest possible SCSI emulation. It can do asynchronous data transfers at 
up to 7 MHz (14 MBytes/sec if using wide SCSI) and up to 10MHz synchronous (20 
MBytes/sec), the fastest rate allowedby the SCSI-2 standard today (July 1994). Using the proper 
adapter pods, the emulator can be used on either single-ended or differential bus interfaces. 

6.2 SCSI INITIATOR EMULATION 

To enter the SCSI INITIATOR EMULATION MENU from the MAIN MENU, select option 
"<9> - Emulate" or press <E> on external keyboard. This function will allow you to issue SCSI 
commands one at a time or string of commands (macros) directly from this menu. You can select 
your commands from the upper part of the menu; you can also access several auxiliary functions 
of the Emulator from the lower part. The menu is as follows: 

SCSI INITIATOR MENU 


SCSI COMMANDS: 

A - (00) Test U Rdy F - (12) Inquiry K - (28) Read (10) 

B - (03) Req Sense G - (16) Reserve Unit L - (2A) Write (10) 

C - (04) Format Unit H - (17) Release Unit M - (3B) Write Buffer 
D - (08) Read (6) I - (ID) Send Diagn N - (3C) Read Buffer 
E - (0A) Write (6) J - (25) Read Capacity 


a - (01) Rezero d - (IB) Start h - (IE) Prvnt Med Rem 

b - (0B) Seek (6) e - (IB) Stop i - (IE) Allow Med Rem 

c - (2B) Seek (10) f - (1A) Mode Sense t-z [t] Vendor Specific 
g - (15) Mode Select 1-8 Exec Macro 



AUXILIARY FUNCTIONS: 

A X-Setup A E - Edit CDB A I - Initiator ID [7] 

A B - Build Macro [] A H - Autofill [AXLU] A T - Target ID [0] 

A L - List Macros A N - Link Bit [LF] A U - Logical Unit LUN[0] 

A D - Data Buf Mgmt A Y - Queue Tag[ ][ ] A A - LBA [00000001] 

A K - Compare Buffers A Z - Repeat cmd [ ] A F - Incr LBA @ Wt [ ] 

A R - SCSI Reset A G - Incr LBA @ Rd [ ] 

Your Selection ? 

The SCSI COMMANDS section is self explanatory. Remember, that format of commands, and 
consequently their execution may be affected by some of the auxiliary commands. Functions like 
< A H>, < A N>, < A F>, < A G> will affect the contents of the CDB sent for a command . 

Execute individual SCSI commands either by typing their symbol (e.g. type <A> for 
Test-Unit-Ready,..) or move cursor over the <A> field then press <Enter>. The A through N and 
a through i are preprogrammed SCSI commands (saved in internal EEPROM). The t, u, v, w, x, 
y, and z are seven vendor specific commands; they are preset (in the EEPROM) to zeros as a 
default. Use < A E> editing function to change them. The 1 through 8 are eight macro’s. 

To access the individual Vendor Specific commands from the keypad, place the cursor on this 
selection and press <Enter>. The letter in brackets shows the current Vendor Specific command. 
Use the <LeftArrow> or <RightArrow> keys to cycle through the list until the desired letter is 
shown in the brackets, then press <Enter> to execute that command. 

Functions <R>, <P>, <S>, and <Q> are the same as in the MAIN MENU level, and they are not 
listed in this SCSI INITIATOR MENU. These are the RUN, PAUSE, or STOP used for starting, 
pausing, or stopping the trace, and QUIT for exiting from this menu. These functions are 
described in sections 2.2.2, 2.2.3, and 2.2.4 respectively. 

We strongly recommend using external keyboard for operating the SCSI Emulator. If you chose 
using the keypad however, move the highlight bar (using the arrow keys) over the selected 
command, then press the <Enter> key. 

In the following paragraphs, individual auxiliary functions are explained in more detail. 
Functions are listed in alphabetical order. Functions such as " A X - Setup" and " A D - Data 
Buffer Management" are rather complex; they are described in sections 6.4 and 6.3 respectively. 

MESSAGES PROGRAMMED BY THE USER: 

SCSI Command Descriptor Blocks (CDB) can be preceded by one or more messages. The Ancot 
DSC-216 allows the use of these messages in the same command. Each can be individually 
enabled or disabled, and its contents set. Enabled ones will be transmitted in the following order: 

♦ Identify message 

♦ Queue Tag message (2 bytes) 

♦ Custom User message (1 - 16 bytes) 

♦ WDTR (4 bytes) 

♦ SDTR (5 bytes) 




Any of these might be rejected by the target, or have a response message-in phase. If so, the 
remainder of the list will be sent following the response. From the Initiator Emulator’s 
perspective, the Custom User message is entirely rejected if any one byte is rejected. 

Read Sections 6.2.14 and 6.4.5 for more detailed description of how to program custom 
messages. 

6.2.1 < A A> - CHANGE LBA 

This function lets you define the Logical Block Address to be used on the next command with 
such a field (e.g. a Read command). If the LBA bit of the Autofill variable (see Section 6.2.6) 
is set, the LBA you define will be used for the next command. 

6.2.2 < A B>, < A L> - MACROS 

The DSC-216 Emulators’ macro capability lets you define a sequence of commands and other 
functions which will execute sequentially at the press of a single key. The Emulator is shipped 
with several default macros installed. You can edit or rewrite them or you can use them as-is. 
However, each time you restore defaults, the original definitions will be restored as well. 

The " A B - Build Macro" command allows you to construct a macro. The macro buffer is 64 
characters long, so the macro can be quite complex. As you press each key, that character will 
become part of the macro, and will also be executed. When you complete your definition, press 
< A B> again. You can then save or discard the macro you have built. If you define an empty 
macro, it can be saved. This allows you to erase any previously defined macros. Macros may not 
be nested, i.e. you cannot make one macro part of another. 

The " A L - List Macros" command displays all macros currently defined. It is important to 
realize that a macro is merely a list of keystrokes. This means that for items which merely toggle 
between states, like the " A G - Incr LBA @ Wt" command, will have an effect dependent on the 
initial state of the toggle. Some items require an <Enter> key press to end data input, like the 
" A A - Chng LBA" command. The <Enter> key is not shown as part of the macro, even though 
it will occur. Instead, the value entered as input is shown in curly brackets {}. 

Execute macros by pressing the corresponding number key in the range 1 through 8. Macros can 
be repeatedly executed if " A Z - Repeat Command" is enabled (see Section 6.2.13). 

6.2.3 < A D> - DATA BUFFER MANAGEMENT 

This item gives access to the Data Buffer Management, which will display its own menu. See 
Section 6.3 for a complete discussion of the buffer management functions. 

6.2.4 < A E> - EDIT CDB 

This function allows you to set or clear any bit of any defined CDB (Command Descriptor 
Blocks), including the Vendor Unique CDBs. The current contents of the CDB selected are 
displayed, and you can change any or all of the bytes. The modified CDB is retained until you 
restore defaults (see Section 7.3.5). 



You have complete control over 7 custom CDBs, accessed via SCSI Command letters <t> 
through <z> (lower case). The defaults for these CDBs are all zeros, making them 
Test-Unit-Ready’commands. Using the < A E> - Edit CDB function, you can make them into any 
command, including the non-standard ones. You will be asked to specify In, Out, or No buffer 
if data phase for that particular command requires a buffer. All CDBs are stored in non-volatile 
memory (EEPROM) and will retain their contents even after a system reset. 

Editing the CDBs is done as follows: Press the < A E> key to enter the ’Edit CDB’ mode, and 
enter the letter representing the SCSI command CDB to be edited. Current CDB will be 
displayed in Hex format. Move cursor (using <LeftArrow> or <RightArrow> key) and change 
individual bytes. When finished, press <Q> to save the new edited values and return back to the 
Initiator Emulation menu. 

Remember that while executing individual SCSI commands, certain fields will be filled in ’on the 
fly’ if the A H - Autofill function is enabled. Read more on this in Section 6.2.6 below. 

6.2.5 < A F>, < A G> - INCREMENT LBA AFTER WRITE/READ 

These options affect the value of the LBA variable after each SCSI Read or Write command. 
Note that this will affect the CDB only if Autofill is enabled for LBA (see Section 6.2.6). If the 
incrementation is enabled, then the LBA is incremented as a 32 bit value. The upper bits of the 
value may be truncated if the CDB does not have room for all of them. 

6.2.6 < A H> - AUTOFILL 

Of particular interest is the " A H-Autofill" selection. Autofill, if fully enabled will insert the 
current values for LBA, Allocation/Transfer Length, Link (and flag) bit and Target LUN into the 
CDB. Each of these items can be individually enabled or disabled, using the following values. 

Selection Code Affected field 


A LBA 

X Alloc/transfer length 

L Link and Llag bits 

U LUN 

Open the Autofill field by pressing <Enter>, then using the selection codes, toggle individual 
selections ON & OLE; you can turn a particular bit ON to enable automatic fill of that field in any 
affected CDB. Turning it OLE leaves that field with the value it held on the previous use of the 
affected command. 

The selection code will toggle selections ON and OLE. The corresponding selection code will 
be displayed in ’upper case’ for ON state, and in lower case’ for OLE state. As an example, type 
<U> to enable and disable automatic filling of LUN in subsequent execution of commands. This 
autofill will be effective until the <U> is turned OFF (by typing <U> again). Similarly, it works 
with the L, X, or A selections respectively. 



For example, to have the Emulator fill in the Link bit and the LBA, but to leave the LUN and 
transfer length alone: open the Autofill field by pressing <Enter> then toggle the <L> and <A> 
codes; this selection will be displayed as’AxLu’. The Emulator will then look at the current 
settings for the LBA to enter it into the CDB. It will also check how you want the Link and Llag 
bits set in the last byte of the CDB, and fill them in. 

Note that the Autofill for LUN does not affect the LUN field of the Identify message. That field 
will always hold the current value of the LUN variable. 

6.2.7 < A I> - INITIATOR ID 

Determines the SCSI ID number to be used by the Initiator Emulator. The ID number currently 
selected is entered in hex (0 through L). The corresponding bit will be asserted on the data bus 
during Arbitration to identify the Initiator. 

6.2.8 < A K> - COMPARE BUFFERS 

Selecting this option causes a byte-by-byte comparison of the current contents of the SCSI Read 
Data Buffer and the SCSI Write Data Buffer. Both of these buffers should have their lengths 
defined beforehand - see Section 6.3.5 for details. If their lengths are different, then the shorter 
one will be used for the comparison. The number of mismatches is reported (e.g. ’K0003 ’) if any 
is detected. If the buffers compare correctly, only ’K-’ is displayed on the screen and no other 
report is issued. 

6.2.9 < A N> - LINK & FLAG BIT 

This selection allows you to emulate linked commands. Using <Enter> you can change this 
variable to 3 possible states, as shown by the codes below: 

Code Function 


blank Link and Flag bits both cleared 

L Link bit set, Flag bit cleared 

FL Link and Flag bits both set 

The Link & Flag bits feature is intended to test target handling of linked commands. The Link 
bit is used to continue the I/O process across multiple commands. The Flag bit is typically used 
to cause an interrupt in the initiator between linked commands. 

If this feature is used, the selected command will be sent by the initiator emulator of the 
DSC-216. The target should go through execution of this command, then respond with 
Intermediate-Condition met’ (=14 hex) or Intermediate’(=10 hex) status, and Linked Command 
Complete’ message-in, then again enter the command phase for the next command. 

The DSC-216 emulator will send the same CDB second time, this time with the Link bit reset. 
The target should execute this (second linked) command and should conclude it with status = 00 
and message-in = 00. If an error occurs anytime during execution of the first command, ’Check 
Condition’ status should be returned by the target and the command should terminate immediately 
without starting the second linked command. 



6.2.10 < A R> - SCSI RESET 


Selecting this option asserts the SCSI RST line, causing a Reset condition on the bus. The line 
is held asserted approximately 26 microseconds, then released. (The SCSI specification requires 
a minimum of 25 microseconds, with no maximum.) 

6.2.11 < A T> - TARGET ID 

Determines the SCSI ID number of the Target to be selected by the Initiator Emulator. The 
Target ID number currently selected is shown in hex (0 through F). The corresponding bit for 
currently selected Target ID will be asserted on the data bus during Selection. 

6.2.12 < A U> - LOGICAL UNIT (LUN) 

Determines the Logical Unit Number (LUN) in the Target to be selected by the Initiator Emulator. 
Enter the new LUN selection in the range 0 through 7. 

6.2.13 < A X> - EMULATOR SETUP 

This selection allows setting up various operating parameters for the SCSI Emulator. See Section 
6.4 for a complete description. 

6.2.14 < A Y> - QUEUE TAG 

This selection is shown in the Emulation menu as < A Y> - Queue Tag[ ][ ]. When disabled, the 
two square brackets will be empty. When enabled, the first set of brackets holds a letter telling 
which type of tag will be used. Possible letters are : 

<S> simple tag 
<H> head-of-queue tag 
<0> ordered tag 

The second set of brackets holds the actual tag number that will be used. 

Select this option by pressing the < A Y> key, and a sub-menu will be displayed as shown below. 
This menu will allow enabling the function and setting the exact message content to be used. 


QUEUE TAG MESSAGE MENU 


<1> - Disabled (D) 

<2> - Simple Queue 

() 

<3> - Head of Queue 

() 

<4> - Ordered Queue 

() 

<5> - Tag number 

[00] 


<Q> - Quit, Save Changes 
<Esc> Quit, Discard Changes 


Your selection (0../Q) ? 






Only one of the first 4 options can be selected at any one time. If item 1 is selected (disabling 
tagged queued commands), the tag number will not be shown. The [E] shows which option is 
selected. To avoid confusion, if item <1> Disabled is selected, it is shown by "D" in the 
parentheses. 

To select a different type of queue tag message, either type the number of the selection or move 
the highlight bar to that line and press <Space> or <Enter>. 

6.2.15 < A Z> - REPEAT COMMAND 

When enabled by <Enter>, this item causes the next command selected to be executed repeatedly 
until stopped by a keypress (any key). The halting keypress also disables repeating for subsequent 
commands until explicitly enabled again. Macros can also be repeated, just like individual 
commands. 

6.3 < A D> - DATA BUFFER MANAGEMENT 

This selection allows you to manipulate the data buffers used for SCSI commands. Menu 
selections allow you to fill the outgoing data with a variety of patterns, or to view and edit each 
individual byte. You can also view the contents of the incoming buffers from the previous SCSI 
command. 

DATA BUFFER MANAGEMENT MENU 


<0> - Select Buffer... [Data-Out] 

<1> - View and Edit Buffer 
<2> - Fill Buffer... 

<3> - Copy Buffer... 

<4> - Set Buffer Size [$0200] 

6.3.1 <0> - SELECT BUFFER 

Always select the proper buffer before viewing, editing, or filling it. Toggle the buffer selection 
using the arrow keys. The following buffers can be selected: 

- (SCSI) Data In 

- (SCSI) Data Out 

- (Custom) User Message 

- Mode Select (Data) 

- Mode Sense (Data) 

- Request Sense (Data) 

- Inquiry Data 

The Custom User Message is a message-out which will be sent following Identify message, just 
before the Command phase. This would be the Abort, Queue Tag, vendor unique, or similar 
messages. 





The SDTR or WDTR would also be sent in this position, however, these two extended messages 
are rather complex and therefore are programmed from another menu: from the main menu, 
select <E> for Emulation, < A X> for Emulation Setup, and <5> for Data Transfer Protocol (SDTR 
& WDTR) menu. 

When copying a buffer to buffer, the source buffer is designated on the <0>-Select Buffer line. 
You will be prompted to select the destination buffer when you type <3> for Copy Buffer. 

6.3.2 <1> - VIEW AND EDIT BUFFER 

This selection allows you to examine each byte of the active buffer. You can modify any or all 
of the bytes. 

Editing is very simple. Use the cursor control keys (<arrows>, <PgUp>, etc) to move to the byte 
you want to change. Then type the new value for the byte. As long as you type keys which are 
valid hexadecimal digits, the cursor will move along in the buffer and the new data will replace 
the old. You can also use the cursor control keys to skip over or move back within the buffer. 

If you type only single digit for a byte, then type <Enter> or some key which is not a valid 
hexadecimal digit, the digit you typed will be used as the value for the entire byte (it will appear 
as the low-order 4 bits). To end the editing session, press <Quit>. Keys which have no meaning 
in the context of the editor will be ignored. (Note that many of the keys on the built-in keypad 
are interpreted as single characters and may be valid hexadecimal digits). 

6.3.3 <2> - FILL BUFFER 

This option allows you to select or define a fill pattern which will replicate throughout the buffer. 
Using the deft arrow> or cright arrow> keys, select the following patterns: 

zeros - every bit in the buffer will be turned off 

ones - every bit in the buffer will be turned on 

random - a pseudo-random pattern of byte value will be used to fill the buffer. The seed 
byte is generated by internal clock interrupt. 

incr. - you will be asked for a pattern of up to 15 bytes. Type the desired pattern in Hex, 
separating bytes with spaces. The pattern will be used to fill the buffer. Each copy 
of the pattern will be incremented from the previous copy. For example, if you 
chose the pattern $A0 F2, the buffer will be filled with the following pattern: 

address Values 

0: aO f2 aO f3 aO f4 aO f5 aO f6 aO f7 aO f8 aO f9 

10: aO fa aO fb aO fc aO fd aO fe aO ff al 00 al 01 


const - you will be asked for a pattern like that for an incrementing fill. The pattern will 
be used (unchanged) to fill the entire buffer. 



6.3.4 <3> - COPY BUFFER 


This selection allows you to copy from the active buffer to any other buffer for outgoing data. 
If the buffers are the same size, the entire length will be copied. If the buffers are different 
sizes, only the length of the shorter one will be copied. The remainder of the longer buffer 
will be unchanged. You can copy any source buffer into (almost) any destination buffer; the 
exception for destination are the input buffers. 

Before copying, always select the proper source buffer. Toggle the (source) buffer selection 
using the arrow keys in selection <0>. When you type <3> for Copy Buffer, you will be 
prompted to select the destination buffer. Select the destination using the arrow keys, then 
press <Enter> to execute the copy. 

6.3.5 <4> - SET BUFFER SIZE 

This selection allows you to specify the number of bytes in any of the buffers. Certain 
maximums must be observed, as shown in the table below: 


Buffer 

Maximum Size 

Default 


(decimal) 

(hex) 

(hex) 

Read 

64 KBytes 

10000 

200 

Write 

64 KBytes 

10000 

200 

User Msg Out 

16 Bytes 

10 

00 

Req Sense Data 

32 Bytes 

20 

20 

Inquiry Data 

48 Bytes 

40 

30 

Mode Sense Data 

255 Bytes 

FF 

FF 

Mode Select Parms 

255 Bytes 

FF 

C 


6.4 < A X> - EMULATOR SETUP 

Selecting option < A X> gives access to the various operating parameters of the SCSI 
emulator. Parameters can be changed through selections from this menu: 

EMULATOR SETUP MENU 


<0> - Alloc/Xfer Lengths... 

<1> - Arbitration [E] 

<2> - Identify Message [E] 

<3> - Disconnect/Reconnect... [E] 
<4> - Custom Message... [ ] 

<5> - Data Xfer Protocols (W/SDTR) 
<6> - Mode Sense/Select setup... 

<7> - Target type... [O(Disk)] 

<8> - SCSI Version [2] 

<9> - Command Timeout [E] 




You can make your selections by either moving the highlight bar and pressing the <Enter> 
key, or directly by pressing the selector key listed along the left side on this menu. The left- 
and right-arrow keys change the current value (in [ ] brackets). 

6.4.1 <0> - ALLOCATION/TRANSFER LENGTHS 

This selection gives access to control of the amount of data to be transmitted or received and 
saved during various data phases. All numeric entries are in hex (0 - F). 

The menu for these selections is as follows: 

ALLOCATION / TRANSFER LENGTHS 


<0> - Xfer Len - Rand Acc [00000001] blocks 
<1> - Xfer Len - Seq Acc/Proc/Comm[000200] bytes 
<2> - Target Block Size [0200] bytes 

<3> - Alloc Length for Request Sense [020] bytes 
<4> - Alloc Length for Inquiry [030] bytes 

<0> - Initiator Transfer Length for random access device type - is a value which will be filled 
in the TxLgh field of Read/Write type commands if ’Autofill’ is enabled. 

<1> - Initiator Transfer Length for Seq. Access,, Processor, or Communications device type 
- is a value which will be filled in the TxLgh field of Read/Write type commands if ’Autofill’ 
is enabled. 

<2> - Target Block Size - defines the data block size expected in the Target. Data buffer 
used by the Read/Write type commands will be sub-divided based on this value. 

<3> - Allocation Length for Request Sense - is a length of buffer allocated for Sense data 
received from the Target in a Request Sense command. Maximum value is 20 hex. This 
value will be filled in the Allocation Length field of a Request sense command if ’Autofill’ 
is enabled. 

<4> - Allocation Length for Inquiry - is a length of buffer allocated for Inquiry data received 
from the Target in a Inquiry command. Maximum value is 40 hex. This value will be filled 
in the Allocation Length field of an Inquiry command if ’Autofill’ is enabled. 

6.4.2 <1> - ARBITRATION 

For SCSI-2, Arbitration is mandatory. However, in SCSI-1, it was optional and some very 
early systems did not arbitrate. This selection allows you to disable Arbitration in order to 
emulate those early (SCSI-1) systems. Note that by disabling Arbitration, the 
Disconnect/Reconnect option will also be disabled. 




6.4.3 <2> - IDENTIFY MESSAGE 


This selection determines whether Selection with Attention will be used (to signal a desire 
by the Initiator to send a Message Out to the Target before the CDB. This message phase is 
normally used for an Identify Message, for Queue Tag messages and for Protocol 
Negotiations. When Arbitration is disabled, Identify Message is also disabled. 

6.4.4 <3> - DISCONNECT / RECONNECT 

This selection determines whether the Target will be allowed to disconnect during the 
command. When emulating a SCSI Initiator, the Identify message will have the "disconnect 
permission" bit (bit 6) cleared as a default. When Arbitration or Identify Message is 
disabled, the Disconnect is also disabled. 

6.4.5 <4> - CUSTOM MESSAGE 

This selection allows you to specify an extension to the initial Message-Out phase of a 
command, and the bytes to be sent in that extended phase. Selecting this option gives access 
to the following menu: 

CUSTOM MESSAGE MENU 


<0> - Edit msg-out buffer 
<1> - Use [ never] 

Your selection (0../Q) ? 

Press <Enter> with bar over the <0> - Edit buffer or press <0> to open another window, 
showing the current contents of the buffer. Only those bytes up to the current length are shown. 
The cursor will be on the first byte of the buffer. To add bytes to the buffer, simply press the 
down arrow key and the cursor will move to a new byte, up to a total of 16 bytes. When you enter 
a value for the byte, the meaning will be shown to the right. To change an existing byte, move 
the cursor to that byte and type the new value. Press <Q> to stop editing and save the new buffer. 

Selecting <1> - Use will toggle between the options "never", "always" and "next cmd". 

6.4.6 <5> - DATA PROTOCOLS 

This selection allows you to control the way that data is transferred during either the Data-In or 
Data-Out phases. Selecting this option gives access to the following menu: 

DATA PHASE TRANSFER PROTOCOLS 


<0> - Synchronous Transfers [E] 
<1>- Offset [15] 

<2> - Period(ns) [100] 

<3> - Resp w/ Msg Reject [N] 
<4> - Negotiation [RqS/Inq] 

<5> - Wide Transfers [E] 





<6> - Transfer Width [16] 

<7> - Resp w/ Msg Reject [N] 

<8> - Negotiation [ Never] 

SCSI-2 provides for FAST (rates above 5MHz and below 10MHz) and WIDE (2 or 4 bytes) data 
transfer modes. Note, that only data phases In/Out will use these modes. All other phases 
(Command, Status, Message phases) always use asynchronous and single-byte transfer mode. 
Also note, that before FAST and/or WIDE are used, they must be negotiated between each 
Initiator and Target. 

A SCSI system can have a mix of devices, each using a different mode. It is also provided for 
SCSI-1 devices, that do not recognize, and do not support these modes; these devices will reject 
the SDTR (Synchronous Data Transfer Request) and WDTR (Wide Data Transfer request) 
extended messages. 

SDTR and WDTR negotiation(s) usually occur during power-up sequence (positioned 
immediately after Identify message, just before the command phase). The SDTR and WDTR 
extended messages are attached to Request-sense and/or Inquiry commands. Consult the SCSI-2 
specifications for detailed rules defining use of these messages. 

When making selections from the menu, use arrow keys to toggle between values within allowed 
limits. 

Items <0> and <5> are used for enabling the use of SDTR and WDTR extended messages to 
negotiate synchronous and wide data transfer modes. If enabled, format of the SDTR and WDTR 
will be defined by parameters, as currently selected. Also note that enabling synchronous or wide 
transfers still requires negotiation. See items <4> and <8>. 

Item <1> allows you to select the maximum synchronous offset allowed during data transfers. 
Offsets up to 15 (hex OF) are supported. 

Item <2> allows you to select the synchronous rate. Rates are selectable from 100 ns to 200 ns 
when using FAST synchronous transfers, and from 200 ns to 875 ns when using normal 
synchronous transfers. This gives a range of rates from approximately 1.4MHz up to the 
maximum of 10MHz allowed by SCSI-2. 

Items <3> and <7> allow you to select how the Emulator responds to WDTR/SDTR negotiations 
when a particular transfer type is disabled. If "Respond w/ Msg Reject" is enabled, the emulator 
will reject WDTR and/or SDTR extended messages. If disabled, it will respond with an extended 
message which shows an inability to transfer data with the protocol requested. For example, if 
Wide Data Transfers are disabled, and the Emulator receives a WDTR extended message, it will 
respond with a WDTR extended message showing ’0’ for the width byte. Similarly, the SDTR 
message response will have a 0 offset byte. 

Items <4> and <8> allow you to decide when WDTR / SDTR negotiation should be done: 

a) never, 

b) next command, 

c) on each Request Sense or Inquiry command. 

d) on every command 



The SCSI-2 specification recommends negotiating with each Request Sense or Inquiry command. 
If "next command" is selected, this function will revert to "never" after that command. 


Item <6> allows you to select either 8-bit or 16-bit data transfers. 
6.4.7 <6> - MODE SENSE / SELECT SETUP 
Selecting this option gives access to the following menu. 

MODE SENSE / MODE SELECT MENU 


<0> - Mode Sense Alloc Length (In) [$24] 

<1> - Mode Select Param List Length [$0C] 

<2> - Edit Mode Select Parameter List 

<3> - Copy Mode Sense Data to Mode Select Parms 


Item <0> specifies the buffer size (in bytes) allocated by the Initiator for Mode Sense data 
received from the Target. 

Item <1> specifies the number of bytes which the Initiator will send (if the Target allows it) as 
parameters of the Mode Select Command. 

Item <2> allows you to view and change the data sent as parameters. This acts the same as the 
Data Buffer Management menu. 

Item <3> allows you to copy Mode Sense Data (as received from the Target) to the Mode Select 
Parameter List buffer (before sending it back to the Target). This would be useful when you are 
experimenting (editing) with certain parameters, but want to preserve the rest as it is. 

6.4.8 <7> - TARGET TYPE 

This selection allows you to specify the type of target addressed by following commands. Several 
commands vary in the contents of the CDB and the meaning of the bits in the CDB depending on 
the target type. Currently the supported target types include : 

Type 0 - Random Access Devices (Disk drives. Many of these commands 
will act the same way for Optical drives, CD-ROM drives and 
similar devices) 

Type 1 - Sequential Access Devices (Tape drives) 

Type 3 - Processor Devices 

If interest warrants, other device types will be added in the future. Commands which apply to all 
devices can, of course, be sent to any device type. Also, using the vendor specific commands, you 
can define commands for other device types. 




6.4.9 <8> - SCSI VERSION 


This selection allows you to specify whether to use SCSI-1 or SCSI-2 protocols. Only a few 
commands are affected by the SCSI version. If you are not sure which version is supported by 
the device being addressed, we recommend that you select SCSI-2 version. 

6.4.10 <9> - TIMEOUT SELECTION 

Timeout options determine how the Emulator will behave if the device being addressed does not 
respond in a timely manner. If enabled, timeout will abort the current command by issuing a 
SCSI RESET condition if the command has not completed within approximately 2 seconds. 

It is important, if you are going to issue a command which is not expected to complete within the 
timeout period (such as a tape rewind command, or a disk format command) to disable timeout. 



SECTION 7 


UTILITIES 

7.1 INTRODUCTION 

Several utility functions are provided in the DSC-216. See section 5 for a discussion of the 
built-in search capability. The other functions are described below. 

7.2 CALCULATING ELAPSED TIME IN TRACE 

From the main menu, press <7> or <Ctrl-T> to access this utility. This function can also be 
accessed from any screen of trace memory display by pressing < A Time> or (< A T> on the external 
keyboard). 

You will be asked to provide two trace memory addresses. These may be entered in either order. 
The utility then examines the time stamp for each event, and reports the time elapsed from the 
earlier event to the later event. Note that elapsed time is modulo about 170 seconds, the timer 
wrap-around period. Thus if the actual elapsed time was 175 seconds, the utility function will 
report a time of about 5 seconds. 

CALCULATE TIME DIFFERENCE 
From address : [ 1] 

To address : [000B0] 

Time difference : 1.689 994 440 

The ’from ’ and ’to ’ addresses are automatically filled in as default values, and may be typed over. 
The from ’ address is always = 1, and the ’to ’ address is the currently used trace memory end. The 
time difference is in nanoseconds. In the example above, it is 1 second, 689 milliseconds, 994 
microseconds, and 440 nanoseconds. 

7.3 THE UTILITY FUNCTIONS MENU 

From the main menu, press <Util> or <8> or <U>. A second level menu will appear, the 
UTILITY FUNCTIONS MENU, in the following format: 

UTILITY FUNCTIONS MENU 


<0> - Screen saver [E] 

<1> - Echo trace display to printer [ ] 
<2> - Printer timeout [E] 

<3> - Show system configuration 
<4> - Restore system defaults 
<5> - Remote control via serial port[ ] 
<6> - Set serial port parameters 


Your selection (0../Quit) ? 




Make your selections either by entering the <Number> directly (e.g. select 4 for "restore system 
defaults"), or by moving the highlight bar over a certain line, using the Arrow keys and pressing 

<Enter>. 

Individual functions are explained below. 

7.3.1 <0> - USING THE SCREEN SAVER 

Electroluminescent displays like the one in the DSC-216 are subject to ’screen bum-in’ if the 
contents of the screen do not change for a long period of time; a screen may show a ghost of a 
previous image. To prevent this effect, the display has a screen saver feature. If a significant time 
passes with no keyboard or display activity, the screen will blank. To bring it back, press any key. 

You can turn off the screen saver feature from the UTILITY FUNCTIONS MENU. Choose item 
<0> to toggle between enabled or disabled screen saver. 

7.3.2 <1> - PRINTING DISPLAY INFORMATION 

You can print a hard copy of the trace information, just as it appears on the screen. The LED near 
the bottom of the front panel, by the < A Print> key, tells if printing is enabled. When the LED 
is lit, each line of trace memory displayed to the screen will also be sent to the parallel printer 
connected to J1. Some displays use the IBM PC Extended Character Set for ASCII graphics. Be 
sure that your printer has such font selected. 

All trace display formats can be printed except the ’Command Profile’. 

Printing can be enabled or disabled by pressing <Ctrl-P> on the keypad or external keyboard 
anytime, from any menu level, even in the middle of displaying. Another method is selecting 
item <1> in the UTILITY functions menu. The <Enter> key toggles between enabled shown 
as E’ in the square brackets, and disabled shown by empty brackets. 

When using a PC for remote control, use the <Alt-P> instead (the <Ctrl-P> is used by the PC 
locally). However, when using the PROCOMM package on the PC, the printing function cannot 
be used at all, because PROCOMM ’swallows’ the <Alt-P>. 

7.3.3 <2> - PRINTER TIMEOUT 

When enabled, this option will limit the timeout delay if the printer is not responding. After a few 
seconds, the character waiting to be sent to the printer will be discarded and printing will be 
disabled (shown by turning off indicator LED on the front panel). 

When disabled, the BIOS will wait indefinitely until the printer is ready (and connected). To 
recover from a printer "hang", either connect a printer or press <SystemReset> (Note: any trace 
will be lost). 


7.3.4 <3> - SHOW SYSTEM CONFIGURATION 



Choosing this option will display on the screen all of the system options which are retained 
through power Off-On cycle (stored in non-volatile memory). Scroll through the screens with 
<Next> or <Prev>. 

To print the configuration, enable printing before you choose this menu selection. If you are 
already displaying the information, press < A Print>, then <Next> or <Prev>. If any of the 
options are printed, they will all be printed (about 3 pages). 

You can also see the default values for the system configuration. Press <Flip> to toggle between 
defaults and current values. 

7.3.5 <4> - RESTORING SYSTEM DEFAULT PARAMETERS 

With this selection, all of the variables stored in EEPROM will be restored to their default values. 
Similarly, the variables in SRAM are restored to the power-on state. 

7.3.6 <5> - REMOTE CONTROL FROM AN EXTERNAL HOST (PC) 

or USING THE DSC-216 AT A REMOTE LOCATION 

There are situations when it is needed to test or troubleshoot a SCSI system at a remote location. 
It is possible to connect the DSC-216 Analyzer to SCSI bus to be tested, and connect the 
controlling terminal over a modem, or via a NULL-modem cable. 

The operator at the test site (we will call this site-A, and the receiving end site-B) simply connects 
the DSC-216 to the SCSI bus system as usual. He/she then connects the DSC-216 Serial Port J3 
to the modem port. The engineer connects his/her terminal (or host computer) at the other end 
to the telephone line. If site-A and site-B are close together, a NULL-modem cable can be used 
instead. See Appendix A for pinout. 

Site-A setup: the operator connects the DSC-216 to the SCSI bus under test, and enables the 
remote control by selecting the UTILITIES menu, and starting selection <4>. A message will 
appear on the screen asking for confirmation. Press <Yes> to confirm this, and the message 

’THIS UNIT IS UNDER REMOTE CONTROL - DO NOT DISTURB’ 

appears on the screen. At this point, the keypad, or a keyboard if connected to J4, is disabled. 
The DSC-216 can be restarted, to restore control from site-A, by pressing the SYSTEM 
RESET pushbutton, or by turning the power OFF and ON. 

Site-B operation: Log onto the remote terminal or host computer, and start the communications 
utility program (BITCOM, PROCOMM or similar, using VT-100 setting). The screen should 
clear, and the UTILITY menu from the DSC-216 (from site-A by modem) should display on your 
screen. At this point, the keyboard on your remote terminal should act as if connected directly 
to the DSC-216; all functions on the DSC-216 should be operational. 


When finished with the session, select the Utilities menu from your remote terminal, select item 
4 to disable remote control, and confirm the selection by pressing <Y>. Control will return to the 



DSC-216 local screen and keyboard. Remote control can also be disabled by pressing the 
SYSTEM RESET switch on the DSC-216 front panel, or by cycling power to the DSC-216. 

The terminal used for remote control should support the ANSI escape sequences for clearing, 
moving the cursor, and for inverse video. See Appendix B for definitions of the sequences used. 

7.3.7 <6> - SETTING SERIAL PORT PARAMETERS 

This option allows you to specify the exact RS-232 protocol to be used for transfers, including 
baud rate, number of data bits, stop bits, and parity. 

A list of the current settings will appear on the screen. Use the up or down arrow keys to move 
the highlight to the item you wish to change. Use the left or right arrow keys to scroll through 
the available options for that item. When all items are correct, press <Enter> to record them and 
exit. The settings are also stored in non-volatile EEPROM memory and will be used as a default 
next time you do any communications again even after power OFF/ON. 

The following settings are selectable: 

Baud rates : 110, 300, 600, 1200, 2400, 4800, 9600 or 38400 (38.4k) 

Number of data bits : 5, 6, 7 or 8 
Parity : even, odd or none (No parity) 

Stop bits : 1 or 2 


When shipped from the factory, the DSC-216 default setting is: 

9600 baud 
8 data bits 
No parity 
1 stop bit 



SECTION 8 


INSTALLATION 

8.1 UNPACKING 

Inspect the shipping carton for signs of damage before opening. If there is any evidence of 
damage, notify the carrier and ANCOT immediately. 

Remove the instrument and all accessories from the shipping carton, and compare the contents 
with the parts list accompanying the package, or listed on the packing slip. If any equipment is 
missing, contact the ANCOT local representative, or ANCOT directly as soon as possible. 

You may want to save the shipping carton to facilitate return of the equipment for factory service 
should that become required. 

8.2 INITIAL TURN-ON 

Connect the line cord to the AC module on the front panel of the DSC-216, and plug it in the 
three-pin 110-220 Volt (the power supply is auto-ranging) wall outlet. If a three-pin outlet is not 
available, use a two-pin socket with proper ground wire attached and connected to ground. 

If you want to use an external keyboard with your DSC-216 rather than the built-in keypad, 
connect its cord to the J4 KBD connector. Note that this keyboard should be the newer PC/AT 
type, one which does not require initialization from the host (the DSC-216 does not initialize the 
keyboard). 

Turn the power ON. The power switch is in the upper right corner of the front panel. During the 
Power-UP sequence, all memories in the system are diagnosed automatically. You will be 
notified at this time if any errors are detected by the Power-UP diagnostic. If no errors are 
detected, the main menu will be displayed on the screen. 

If a printer is to be used, connect it by a standard PC/AT printer cable to connector J1 on the front 
panel of the DSC-216. The printer should be any standard parallel type. For J1 connector pinout 
see Appendix A. 

The unit has all setup values preset to their defaults at the factory, and therefore all basic 
functions should be operational. However, setup values may be changed using the various 
selections in the individual menus, or directly from the main menu. 

8.3 INITIAL CHECK-OUT 

Connect a SCSI cable to an active SCSI bus. Be sure that termination is appropriate. The 
Trm.Pwr LED at the left side of the front panel should light. If it does not, turn on the Trm.Pwr 
switch on the SCSI connector pod. 



Press <Run>. Allow enough time for some activity to occur on the SCSI bus. You will see the 
SCSI Control and Data LEDs flash on and off with the activity. Press <Stop>. A message will 
appear on the screen telling the end address of the recording. If this address is 0 or 1, contact the 
factory. 

Press <Display> and <Enter>. You will see the recorded trace. Press <Flip> to change the 
display format. You may want to experiment with other recordings modes and triggering at this 
point. 

8.4 COMMUNICATION, INTERFACING, AND SETUP 

When using a remote CRT terminal or PC connected via the J3 serial port directly or over a 
modem, a compatible communication format and protocol have to be used. To aid the user in 
his/her installation, the serial I/O port is pre-programmed at the factory to a default set of 
parameters. These are: 

J3 port: 9600 baud 

8 data bits 
No parity 
1 stop bit 

RTS and CTS enabled 

Note that J3 when communicating with a CRT terminal uses the following signals: 

pin 2 for RxData 
pin 3 for TxData 

pin 4 for CTS (to throttle the DSC-216 when sending Data out to remote 

host/CRT) 

pin 5 for RTS (to control input from remote KBD) 
pin 7 for Signal GND. 

Pin-6 of J3 is HIGH (+5Volt through a 470-ohm resistor), and can be used for "Hot Wiring" the 
CTS (pin4) of the J3 port for initial startup if READY signal is not available in the terminal. In 
such a case the baud rate may have to be slowed down, to prevent data overruns. 

All the selections described above are stored in the non-volatile EEPROM, and do not need to 
be selected again, unless different values are required. 

If you have problems communicating with the DSC-216 because the serial port is configured 
wrong, you can force the original factory setting. Follow the first 4 steps of the instructions for 
installing a new firmware EPROM (section 8.5) to open the case. This will give access to a red 
DIP switch mounted on the main circuit board directly below the front panel’s SCSI Reset switch. 
Note the current state of the switches on the dipswitch. 


Set the dipswitch position 3 and 8 to the ON (up) position. Connect the terminal cable and apply 
power. When the main menu appears on the terminal screen, shut off power, disconnect the cables 
and restore the dipswitch to its previous state. Close the case back up. 



8.5 EPROM FIRMWARE UPGRADES 


These instructions explain how to install an updated firmware EPROM into your Ancot DSC-216 
SCSI Bus Analyzer. If you decide that you want the factory to install your upgrade for you, 
contact ANCOT directly. 

1. Remove the briefcase cover to reveal the instrument front plate. 

2. Make sure that all cables are disconnected from the front plate, including the 
power cable. 

3. Remove the 8 black Phillips screws (2 on each edge) holding the front plate to the 
briefcase housing. 

4. Carefully lift the front plate and the attached circuit boards and metal pan from the 
briefcase housing. Place the assembly on a flat surface. 

5. Locate the main circuit board. It is the largest PCB which is attached directly to 
the metal pan on the bottom. Find the firmware EPROM to be replaced: it is the 
big 32-pin .600" chip at the extreme left rear of the main PCB, with an ANCOT 
label. It has the DSC-216 instrument identification and firmware revision number 
printed on it. Use a flat blade screwdriver to disengage the EPROM from its 
socket. If you use care in removing it, the EPROM can be erased and reused. 

Insert the new firmware EPROM into the same socket. The small notch on the ceramic 
DIP chip goes closest to the outside edge of the main PCB (same as the other chips on that 
PCB). Be sure that all the legs are aligned with the holes in the socket, before pressing 
the chip firmly into the socket. Check the legs again to be sure none of them were 
damaged during insertion. 

To verify correct installation, apply power and the unit should display the main menu with 
the new revision number in the bottom right corner. Then remove the power cable again. 

Reinsert the electronics assembly into the briefcase housing. The handle of the attache 
case should be at the top of the flat display screen. Insert the 8 screws to hold the 
electronics assembly in the briefcase housing. Tighten the screws firmly (but not too 
tightly!). Attach the attache lid. 

Your DSC-216 is now ready for use with the upgraded firmware. 



SECTION 9 


OPTIONS 

9.1 INTRODUCTION 

ANCOT has developed several optional software applications which may be used with the 
DSC-216 SCSI Bus Analyzer/Emulator. These applications are available from the factory and 
are supplied in two formats: 

♦ An EPROM for insertion into the "user ROM socket" of the DSC-216 main circuit 
board. 

♦ A file in Motorola S-Record format for downloading from a host computer to the 
DSC-216 via the serial port. 

Each application has its own user manual. The descriptions which follow are not intended to be 
complete guides, but rather an indication of the capabilities of the applications. 

9.2 THE APPLICATIONS 

9.2.1 ’ANTEST’ - THE DISK TEST PROGRAM 

ANTEST is ANCOT’s Disk Exerciser/Tester Program. It is available on several platforms, 
including the DSC-216. It is useful for acceptance testing, production testing, or for debugging 
disk drives. ANTEST is completely menu driven for ease of use. Its reports are sent to the user’s 
screen, a parallel printer, and through the serial port, to a file on a host computer. 

ANTEST is capable of numerous tests, to check all aspects of operation of the disk drive under 
test. These tests include : 

♦ Write-Read-Compare 

♦ Read (Check for bad data blocks) 

♦ Seek time 

♦ Data transfer rate 

♦ Spin-up time 

♦ Start-up time 

♦ Throughput rate (I/Os per second) 

♦ Comprehensive test 

♦ Conformance test 

The user has complete control over the test activity. With a setup menu, select synchronous or 
asynchronous data transfers, wide (16-bit) or narrow (8-bit) data transfers, Initiator and Target 
ID numbers, and Logical Unit number. 

With other setup menus, the user can control the length of tests, the actual bytes sent to the target, 
the range of scan of blocks on the disk, etc. 



The reports generated by ANTEST are in 40-column format, suitable for printing by ticket 
printers, for attachment to the drives tested. Pass/Fail is clearly indicated for each test, based on 
criteria you select. 

ANTEST requires the Emulator Board option to be installed on the DSC-216. It uses the 
emulator to issue the commands to the device under test. If the emulator is not installed, the 
program will hang. 

Ask for #AST-220, which is the ANTEST program package for the DSC-216. 

9.2.2 C LANGUAGE CROSS COMPILER 

ANCOT offers a compiler which runs on an IBM PC or compatible, and produces native code 
to execute on the DSC-216. It includes a library of functions for easy use of the capabilities of 
the DSC-216. 

Using this compiler, you can write programs to automate testing and monitoring of the SCSI bus 
using the DSC-216. ANCOT’s disk testing program, ANTEST (mentioned above), was 
constructed using this compiler. 

You can "burn" into EPROM the resulting executable programs, and insert the EPROM into the 
"user ROM socket" on the DSC-216’s main circuit board. You can also (down)load the programs 
into the system SRAM via the serial port from your host PC. Example programs are provided 
showing how to use the features in the ANCOT SCSI Library which accompanies the compiler. 

Several of the functions in the ANCOT SCSI Library, supplied with the cross compiler, use the 
Emulation Board option of the DSC-216. If you call one of these functions in your program, and 
the emulator is not present, the program will hang. 

9.2.3 THE TRACE MIRROR MEMORY OPTION 

This optional feature allows the DSC-216 to save the captured trace, and preserve it in a non 
volatile memory; the DSC-216 then can be turned off and possibly transported; later, the trace 
can be restored back to the DSC-216 for examination. This option is described in Appendix F. 

9.2.4 SCSI CONNECTOR PODS 

The J5 and J6 SCSI connectors are mounted on the replaceable module. Several pod types are 
available: pods for Single-Ended and Differential interfaces, for Narrow (50-pin) and Wide 
(68-pin) SCSI bus, with ’Centronics’ type or high-density type connectors. The Single-Ended 
interfaces have (’active’) terminators built in, enabled by a switch. All pods have TERMPWR 
enabled by a switch. 


Consult Appendix A section A.3 for pinouts, ordering information, and other details. 



APPENDICES 


APPENDIX A 

EXTERNAL CONNECTOR PIN ASSIGNMENT AND CABLES 
A.l I/O INTERFACE CONNECTORS Jl, J3 
J1 - Parallel PRINTER Port (DB-25) 


1 

STB- 

14 

AFD- 

2 

PDO 

15 

ERR- 

3 

PD1 

16 

INIT— 

4 

PD2 

17 

SLIN— 

5 

PD3 

18 

GND 

6 

PD4 

19 

GND 

7 

PD5 

20 

GND 

8 

PD6 

21 

GND 

9 

PD7 

22 

GND 

10 

ACK- 


23 

11 

BUSY 

24 

GND 

12 

PE 

25 

GND 

13 

SLCT 




J3 - Serial I/O Port RS-232 (DB-9) 


GND 


1 DCD 

2 RXD 

3 TXD 

4 DTR 

5 Signal GND 

6 DSR 

7 RTS 

8 CTS 
RI 


9 





A.2 AUXILIARY CONNECTORS J2, J4, J7, J8 


J2 - Expansion Port (DB-15) 


1 

bitO 

9 

+5 Volt * 

2 

bit 1 

10 

Signal GND 

3 

bit 2 

11 

Reserved 

4 

Reserved 

12 

Reserved 

5 

Reserved 

13 

Reserved 

6 

Reserved 

14 

Signal GND 

7 

Reserved 

15 

+5 Volt * 

8 

Reserved 




*Up to 100 mA is available from this Ycc source. 

! WARNING ! 

NOTE THAT PINS J2/9 AND J2/15 HAVE UNFUSED Vcc (+5V) CONNECTED TO 
THEM. THE POWER SUPPLY WILL SHUT OFF AUTOMATICALLY IF THESE PINS 
ARE SHORTED, OR IF YOU DRAW EXCESSIVE CURRENT FROM THEM. 

J4 - External KEYBOARD PC/AT type Port 


1 CLK 4 Signal GND 

2 DATA 5 +5 Volt 

3 N.C. 

J7 - External TRIGGER INPUT (BNC) 


center pin - Ext.Trigger signal 
shell - Chassis GND 

The signal should be TTL level. It is received in the input side of the LS14 - type of a receiver. 
This line is interanlly pulled up by a lk ohm resistor to +5 voly level. 






J8 - External SYNCH OUTPUT (BNC) 


center pin — Ext.Synchr signal 
shell - Chassis GND 

The signal is a standard TTL level, driven by a 20mA driver. 

A.3 SCSI CONNECTOR ADAPTER MODULES WITH J5, J6 

The J5 and J6 SCSI connectors are mounted on the replaceable module. Several pod types are 
available: 

1. SINGLE-ENDED interface pods: 

1 .a: With high-density 68-pin P’ type connector J5 for WIDE SCSI, and Centronics 
style 50-pin ’A’ type connector J6 for NARROW SCSI. P/N: OP-SA/216. 

This is the standard type, which is shipped installed from the factory. 

1. b: With two 68-pin P’ type for WIDE SCSI. P/N: OP-SA68/216. 

2. DIFFERENTIAL interface pods: 

2. a: With same type connectors as La above. Optional. P/N: OP-DA/216. 

2. b: With same two 68-pin connectors as Lb above. Optional. P/N: OP-DA68/216. 

3. SINGLE-ENDED (J5) & DIFFERENTIAL (J6) interface combination pods: 

3. a: With two high-density 68-pin P’ type connectors for WIDE SCSI. Optional. 
P/N: OP-UA68/216 

3.b: With two high-density 50-pin connectors for NARROW SCSI. Optional. 

P/N: OP-UA50/216 

3.c: With two 50-pin Centronics type connectors for NARROW SCSI. Optional. 
P/N: OP-UA50C/216 

The Single-Ended interfaces have (’active’) terminators built in, enabled by a switch. 

All pods have TERMPWR enabled by a switch. 


Pinouts for all above listed modules follow. 




A.3.1 SCSI SINGLE-ENDED 68-pin & 50-pin CONNECTOR MODULE (standard) 
P/N: SA-216 


J5 - 68 pin HD ’P’ type 


J6 - 50-pin (Centronics) ’A’ type 


1 

GND 

35 

D12— 

1 

GND 

26 

D0- 

2 

GND 

36 

D13— 

2 

GND 

27 

Dl- 

3 

GND 

37 

D14— 

3 

GND 

28 

D2- 

4 

GND 

38 

D15— 

4 

GND 

29 

D3— 

5 

GND 

39 

DPAR1— 

5 

GND 

30 

D4— 

6 

GND 

40 

DO— 

6 

GND 

31 

D5— 

7 

GND 

41 

Dl- 

7 

GND 

32 

D6— 

8 

GND 

42 

D2- 

8 

GND 

33 

D7— 

9 

GND 

43 

D3— 

9 

GND 

34 

DPAR— 

10 

GND 

44 

D4— 

10 

GND 

35 

GND 

11 

GND 

45 

D5— 

11 

GND 

36 

GND 

12 

GND 

46 

D6— 

12 

open 

37 

open 

13 

GND 

47 

D7— 

13 

open 

38 

TRMPWR 

14 

GND 

48 

DPAR— 

14 

open 

39 

open 

15 

GND 

49 

GND 

15 

GND 

40 

GND 

16 

GND 

50 

GND 

16 

GND 

41 

ATN- 

17 

TRMPWR 

51 

TRMPWR 

17 

GND 

42 

GND 

18 

TRMPWR 

52 

TRMPWR 

18 

GND 

43 

BSY- 

19 

open 

53 

open 

19 

GND 

44 

ACK- 

20 

GND 

54 

GND 

20 

GND 

45 

RST- 

21 

GND 

55 

ATN- 

21 

GND 

46 

MSG- 

22 

GND 

56 

GND 

22 

GND 

47 

SEL- 

23 

GND 

57 

BSY- 

23 

GND 

48 

C/D 

24 

GND 

58 

ACK- 

24 

GND 

49 

REQ- 

25 

GND 

59 

RST- 

25 

GND 

50 

HO- 

26 

GND 

60 

MSG- 





27 

GND 

61 

SEL- 





28 

GND 

62 

C/D 





29 

GND 

63 

REQ- 





30 

GND 

64 

UO- 





31 

GND 

65 

D8- 





32 

GND 

66 

D9- 





33 

GND 

67 

D10— 





34 

GND 

68 

Dll- 








A.3.2 SCSI DIFFERENTIAL 68-pin & 50-pin CONNECTOR MODULE (optional) 
P/N: DA-216 


J5 - 68-pin HD ’P’ type 


J6 - 50-pin (Centronics) ’A’ type 


1 

D12+ 

35 

D12— 

1 

GND 

26 

GND 

2 

D13+ 

36 

D13— 

2 

D0+ 

27 

D0- 

3 

D14+ 

37 

D14— 

3 

D1+ 

28 

Dl- 

4 

D15+ 

38 

D15— 

4 

D2+ 

29 

D2- 

5 

DPAR1+ 

39 

DPAR1— 

5 

D3+ 

30 

D3— 

6 

GND 

40 

GND 

6 

D4+ 

31 

D4— 

7 

D0+ 

41 

D0- 

7 

D5+ 

32 

D5— 

8 

D1+ 

42 

Dl- 

8 

D6+ 

33 

D6— 

9 

D2+ 

43 

D2- 

9 

D7+ 

34 

D7— 

10 

D3+ 

44 

D3— 

10 

DPAR+ 

35 

DPAR— 

11 

D4+ 

45 

D4— 

11 

open 

36 

GND 

12 

D5+ 

46 

D5- 

12 

open 

37 

open 

13 

D6+ 

47 

D6- 

13 

TERMPWR 

38 

TRMPWR 

14 

D7+ 

48 

D7- 

14 

open 

39 

open 

15 

DPAR+ 

49 

DPAR— 

15 

ATN+ 

40 

ATN- 

16 

open * 

50 

GND 

16 

GND 

41 

GND 

17 

TRMPWR 

51 

TRMPWR 

17 

BSY+ 

42 

BSY- 

18 

TRMPWR 

52 

TRMPWR 

18 

ACK+ 

43 

ACK- 

19 

open 

53 

open 

19 

RST+ 

44 

RST- 

20 

ATN+ 

54 

ATN- 

20 

MSG+ 

45 

MSG 

21 

GND 

55 

GND 

21 

SEL+ 

46 

SEL- 

22 

BSY+ 

56 

BSY- 

22 

C/D+ 

47 

C/D- 

23 

ACK+ 

57 

ACK- 

23 

REQ+ 

48 

REQ- 

24 

RST+ 

58 

RST- 

24 

1/0+ 

49 

I/O- 

25 

MSG+ 

59 

MSG- 

25 

GND 

50 

GND 

26 

SEL+ 

60 

SEL- 





27 

C/D+ 

61 

C/I) 





28 

REQ+ 

62 

REQ- 





29 

1/0+ 

63 

I/O- 





30 

GND 

64 

GND 





31 

D8+ 

65 

D8- 





32 

D9+ 

66 

D9- 





33 

D10+ 

67 

D10— 





34 

D11+ 

68 

Dll- 






*Used for DIFFSENS. This line detects if a single-ended device has been connected to a 
differential bus. If the line is grounded, the Differential line drivers & receives will be disabled. 
Note that this only works on a SCSI device that has fully implemented DIFFSENS protection. 



A.3.3 SCSI S-E and DIFF both 68-pin HIGH DENSITY CONNECTOR MODULE 
(optional) 

P/N: UA68-216 


J 5 - SINGLE-ENDED 68-pin HD ’P’ type J6 - DIFFERENTIAL 68-pin HD 

’P’ type 


1 

GND 

35 

D12— 

1 

D12+ 

35 

D12— 

2 

GND 

36 

D13— 

2 

D13+ 

36 

D13— 

3 

GND 

37 

D14— 

3 

D14+ 

37 

D14— 

4 

GND 

38 

D15— 

4 

D15+ 

38 

D15— 

5 

GND 

39 

DPAR1— 

5 

DPAR1+ 

39 

DPAR1— 

6 

GND 

40 

D0- 

6 

GND 

40 

GND 

7 

GND 

41 

Dl- 

7 

D0+ 

41 

D0- 

8 

GND 

42 

D2- 

8 

D1+ 

42 

Dl- 

9 

GND 

43 

D3— 

9 

D2+ 

43 

D2- 

10 

GND 

44 

D4— 

10 

D3+ 

44 

D3— 

11 

GND 

45 

D5— 

11 

D4+ 

45 

D4— 

12 

GND 

46 

D6— 

12 

D5+ 

46 

D5— 

13 

GND 

47 

D7— 

13 

D6+ 

47 

D6— 

14 

GND 

48 

DPAR- 

14 

D7+ 

48 

D7— 

15 

GND 

49 

GND 

15 

DPAR+ 

49 

DPAR- 

16 

GND 

50 

GND 

16 

open * 

50 

GND 

17 

TRMPWR 

51 

TRMPWR 

17 

TRMPWR 

51 

TRMPWR 

18 

TRMPWR 

52 

TRMPWR 

18 

TRMPWR 

52 

TRMPWR 

19 

open 

53 

open 

19 

open 

53 

open 

20 

GND 

54 

GND 

20 

ATN+ 

54 

ATN- 

21 

GND 

55 

ATN- 

21 

GND 

55 

GND 

22 

GND 

56 

GND 

22 

BSY+ 

56 

BSY- 

23 

GND 

57 

BSY- 

23 

ACK+ 

57 

ACK- 

24 

GND 

58 

ACK- 

24 

RST+ 

58 

RST- 

25 

GND 

59 

RST- 

25 

MSG+ 

59 

MSG- 

26 

GND 

60 

MSG- 

26 

SEL+ 

60 

SEL- 

27 

GND 

61 

SEL- 

27 

C/D+ 

61 

C/D 

28 

GND 

62 

C/D- 

28 

REQ+ 

62 

REQ- 

29 

GND 

63 

REQ- 29 

1/0+ 

63 

I/O- 


30 

GND 

64 

I/O- 

30 

GND 

64 

GND 

31 

GND 

65 

D8- 

31 

D8+ 

65 

D8- 

32 

GND 

66 

D9— 

32 

D9+ 

66 

D9— 

33 

GND 

67 

D10— 

33 

D10+ 

67 

D10— 

34 

GND 

68 

Dll- 

34 

D11+ 

68 

Dll- 


*Used for DIFFSENS. 



A.3.4 SCSI S-E and DIFF both 50-pin HIGH DENSITY CONNECTOR MODULE 
(optional) 

P/N: UA50-216 


Note: This connector module uses both 50-pin High Density connectors (as used on Sun 
Microsystems computers and others) 


J 5 - SINGLE-ENDED 50-pin J6 - DIFFERENTIAL 50-pin HD 


1 

GND 

26 

D0- 

1 

GND 

26 

GND 

2 

GND 

27 

Dl- 

2 

D0+ 

27 

D0- 

3 

GND 

28 

D2- 

3 

D1+ 

28 

Dl- 

4 

GND 

29 

D3— 

4 

D2+ 

29 

D2- 

5 

GND 

30 

D4— 

5 

D3+ 

30 

D3— 

6 

GND 

31 

D5— 

6 

D4+ 

31 

D4— 

7 

GND 

32 

D6— 

7 

D5+ 

32 

D5— 

8 

GND 

33 

D7- 

8 

D6+ 

33 

D6— 

9 

GND 

34 

DPAR— 

9 

D7+ 

34 

D7— 

10 

GND 

35 

GND 

10 

DPAR+ 

35 

DPAR— 

11 

GND 

36 

GND 

11 

open 

36 

GND 

12 

open 

37 

open 

12 

open 

37 

open 

13 

open 

38 

TRMPWR 

13 

TRMPWR 

38 

TRMPWR 

14 

open 

39 

open 

14 

open 

39 

open 

15 

GND 

40 

GND 

15 

ATN+ 

40 

ATN- 

16 

GND 

41 

ATN- 

16 

GND 

41 

GND 

17 

GND 

42 

GND 

17 

BSY+ 

42 

BSY- 

18 

GND 

43 

BSY- 

18 

ACK+ 

43 

ACK- 

19 

GND 

44 

ACK- 

19 

RST+ 

44 

RST- 

20 

GND 

45 

RST- 

20 

MSG+ 

45 

MSG- 

21 

GND 

46 

MSG— 

21 

SEL+ 

46 

SEL- 

22 

GND 

47 

SEL- 

22 

C/D+ 

47 

C/D- 

23 

GND 

48 

C/I) 

23 

REQ+ 

48 

REQ- 

24 

GND 

49 

REQ- 24 

1/0+ 

49 

I/O- 


25 

GND 

50 

I/O- 

25 

GND 

50 

GND 



A.4 NULL-MODEM CABLES 


NULL MODEM CABLE WITH DB-9 HOST CONNECTOR 


DSC-216 end Host end 

DB-9 Female DB-9 Male 


RxD 2- 

TxD 3- 

GND 5- 

DCD 1- 

DTR 4- 

RTS 7-r 

CTS 8- 1 

DSR 6 — r 
RI 9 —J 


-3 TxD 

-2 RxD 

-5 GND 

-[-7 RTS 

1 -8 CTS 

-6 DSR 

1 -9 RI 

-1 DCD 


4 DTR 


NULL MODEM CABLE WITH DB-25 HOST CONNECTOR 


DSC-216 end Host end 

DB-9 Female DB-25 Male 


RxD 2- 

TxD 3- 

GND 5- 

DCD 1- 

DTR 4- 

RTS 7 r 

CTS 8 1 


-2 TxD 

-3 RxD 

-7 GND 

-f-4 RTS 

1 -5 CTS 

1-6 DSR 

I-22 RI 

-8 DCD 


DSR 6 - r 

RI 9- 1 


20 DTR 



















A.5 CABLE ADAPTER DB-9 TO DB-25 


DB-9 TO DB-25 CABLE ADAPTER (PC-AT to PC-XT COM port) 


PC-AT PC-XT 

DB-9 Male DB-25 Female 

DCD 1-8 

RxD 2-3 

TxD 3-2 

DTR 4-20 

GND 5-7 

DSR 6-6 

RTS 7-4 

CTS 8-5 

RI 9-22 


A.6 CABLE ADAPTER FOR TRACE UPLOAD USING THE PARALLEL PORT 
DB-25 TO DB-25 CABLE (PC-AT to DSC-216 Parallel Jl) 


PC-AT (Parallel port) DSC-216 (Jl) 

DB-25 Male DB-25 Male 


STROBE\ 1- 

ACK\ 10- 

BUSY 11- 

SLCT-IN\17- 

INIT\ 16 - — 

SELECT 13—r 
ERROR\ 15-1 

AUTOFD-XT\ 14 
PE 12- 


- 1 STROBE\ 

-10 ACK\ 

-11 BUSY 

-17 SLCT-IN\ 

-16 INIT\ 

1 -13 SELECT 

I-15 ERROR\ 

14 AUTOFD-XT\ 
12 PE 


DATA 2-9 


2-9 DATA 


GND 18-25 
Return 


18-25 GND 
Return 





















APPENDIX B 


ESCAPE SEQUENCES USED IN SCREEN CONTROL 
B.l GENERAL 

Any terminal or computer emulating a terminal connected as a remote display device for the 
ANCOT DSC-216 SCSI Bus Analyzer will need to recognize and act on the following Escape 
sequences. Each sequence begins with an introducer sequence, followed by one or more 
parameters, followed by a terminating character. 

The introducer sequence is either a single Esc character (lb Hex) or the Esc character followed 
by a single ’[’ character (5b Hex). Parameters are decimal numbers transmitted as the ASCII 
characters ’0’ (30 Hex) through 9’ (39 Hex). Parameters are separated from each other by the 
character (3b Hex). In cases where the parameter value is negative, the character is replaced 
by a character (3a Hex). There are no negative parameters in any of the sequences currently 
used. 

The terminating character is always a printable ASCII character, usually either an upper or lower 
case letter. Terminating characters differ depending on the purpose to be accomplished by the 
escape sequence. 

B.2.1 ESCAPE SEQUENCES - OUT (from DSC-216 to Terminal) 

CHARACTER ATTRIBUTE SEQUENCES: 

<Esc>[0m Sets attribute to normal video (bright character on dark background) 

<Esc>[7m Sets attribute to inverse video (dark character on bright background) 

SCREEN CLEARING SEQUENCES: 

<Esc>[0J Clears from cursor to end of screen 

<Esc>[2J Clears entire screen 

<Esc>[0K Clears from cursor to end of line 

<Esc>[2K Clears entire line 

CURSOR MOVEMENT SEQUENCES: 

Sequence sent to the terminal to move the apparent location of the cursor displayed: 

<Esc>[<row>;<column>H Move cursor to row <row> and column <column>. 

For all movement commands, the screen is assumed to have 25 rows, numbered from 1 to 25, and 
80 columns, numbered from 1 to 80. If a parameter is missing or outside the range, 1 is used. 


B.2.2 ESCAPE SEQUENCES - IN (from Terminal to DSC-216) 



<Esc>A 

<Esc>B 

<Esc>C 

<Esc>D 


Move cursor up 
Move cursor down 
Move cursor right 
Move cursor left 



APPENDIX C 


TRACE UPLOAD/DOWNLOAD FORMATS 
C.l HEADER / TRAILER INFORMATION: 

Each file transmitted has a 128-byte header, consisting of the following fields: 
Byte Field 


0-7 "DSC-216 " (ASCE string) 

8-18 Address range. The first value is 5 hex digits, with leading 0’s, representing the 
first trace address transferred. A hyphen only (no spaces) separates the first value from the 
second. The second value, also 5 hex digits, represents the last trace address transferred. 

19 "" (an ASCH space character, 20 Hex) 

20 File format code. The following codes are in use: 

"B" = Binary display format 

"D" = Diagnostic format (not accessible by customers) 

"H" = Hex dump format 
"R" = Raw Data format 
"S" = Structured display format 

21 space 

22-25 recording mode. This is a 16 bit, bit-significant code for the recording 
mode used to obtain this trace. The bits are : 

Bit Meaning 

0-1 not used 

2 Skip data mode enabled (see bit 7) 

3 4-edge of Req/Ack enabled 

4 Phase changes before Req enabled 

5 Record on external clock enabled 

6 Filtering by ID enabled 

7 When skip data is enabled, 1 = keep 8 events 

0 = keep 32 events 

8-9 not used 

10 Capture on BSY or SEL transition only 

11 Capture SCAM protocol 

12-15 not used 

26-126 spaces 

127 "#" 

After all of the file is transferred, a trailer character ASCII EOT (04 Hex) is transmitted. This 
signals the end of transfer. If required by your communications package, halt the transfer and 
save the file on disk. 


C.2 RAW DATA FORMAT 



The Raw Data format is the only one that can be loaded back into the DSC-216 for further 
viewing or more analysis. The determining factor is the presence of the header record that is 
transmitted during upload. If this record is missing, in the wrong format, or otherwise corrupted, 
downloading will be aborted. Also, if a SCSI event record cannot be interpreted, downloading 
will be aborted. 

The Raw Data file format is an encrypted format to ensure that all bytes transmitted are printable 
ASCH, regardless of the binary value found in the trace, while minimizing the number of bytes 
transmitted. The 9 bytes of each trace event are encoded into 12 bytes of printable ASCII data, 
using a scheme defined in section C.2.1 below. Each SCSI event (12 bytes) is followed by a line 
feed/carriage return combination. 

A utility is available from Ancot in C-source (IBM PC executable formats) to convert the 
encrypted Raw Data format file to a human-readable format. Note that only the encrypted format 
can be reloaded into the DSC-216 analyzer. 

C.2.1 NATURAL SCSI EVENTS 

Natural events are those captured as a result of a transition on a SCSI control line. The exact 
recording mode is as set in the Mode Menu. See also section C.2.2 below. 

Standard SCSI signal definitions apply to signals BSY, SEL, ATN, RST, MSG, C/D, I/O, REQ 
and ACK. Other abbreviations used below are: 

Trg If set, the trigger condition has occurred before this event. 

Ex# Expansion port pins 1,2 and 3 map respectively to bits 0,1 and 2. 

PEL,PEH If set, the Low or High byte has bad parity. 

The DSC-216 SCSI Bus Analyzer uses a special high resolution recording method for the REQ, 
ACK and ATN signals. These signals show as Rq#, Ak# and At# here. The 0 (RqO) bit is the state 
at the time of capture, the 2 bit (Rq2) is the state at 20 nanoseconds before capture. 


Bit 

C15 

C14 

C13 

C12 

Cll 

CIO 

C9 

C8 

Signal 

- 

At2 

- 

AtO 

Trg 

Ex2 

Exl 

ExO 

Bit 

C7 

C6 

C5 

C4 

C3 

C2 

Cl 

CO 

Signal 

PEH 

PEL 

BSY 

SEL 

RST 

MSG 

C/D 

I/O 

Bit 

R7 

R6 

R5 

R4 

R3 

R2 

R1 

R0 

Signal 

- 

Ak2 

- 

AkO 


Rq2 


RqO 


Each SCSI event consists of the following parts: 

SCSI control lines C0-C15 (2 bytes) 

SCSI data lines D0-D15 (2 bytes) 

Timestamp T0-T31 (4 bytes) 

High resolution REQ/ACK info R0-R7 (1 byte) 

The time stamp is a counter of ticks since recording started; each tick is 40 ns. 


The 9 bytes of the trace are encoded into 12 bytes for transmission by the following scheme: 



Byte 

Bits: 7 

6 

5 

4 

3 

2 

1 

0 

1 

0 

1 

C5 

C4 

C3 

C2 

Cl 

CO 

2 

0 

1 

Cll 

CIO 

C9 

C8 

C7 

C6 

3 

0 

1 

Dl 

DO 

C15 

C14 

C13 

C12 

4 

0 

1 

D7 

D6 

D5 

D4 

D3 

D2 

5 

0 

1 

D13 

D12 

Dll 

DIO 

D9 

D8 

6 

0 

1 

T3 

T2 

T1 

TO 

D15 

D14 

7 

0 

1 

T9 

T8 

T7 

T6 

T5 

T4 

8 

0 

1 

T15 

T14 

T13 

T12 

Til 

T10 

9 

0 

1 

T21 

T20 

T19 

T18 

T17 

T16 

10 

0 

1 

T27 

T26 

T25 

T24 

T23 

T22 

11 

0 

1 

R1 

R0 

T31 

T30 

T29 

T28 

12 

0 

1 

R7 

R6 

R5 

R4 

R3 

R2 


Note the pattern of bits 7 and 6. The only exception to this pattern is if all of bits 0-5 are 1 ’s; in 
that case bits 6 and 7 are both 0’s. This results in transmitted bytes which are all in the range of 
3F hex to 7E hex, which are printable ASCII values. 

C.2.2 ARTIFICIAL SCSI EVENTS 

In addition to the events captured as a result of transitions on the SCSI control lines, there are 
three types of artificial events written to the trace during recording. Each time the tracer is started 
by pressing <Run>, a ’start trace’ event is written, which has the pattern FEFF hex in the SCSI 
control lines word. Similarly, a ’pause in tracing’ is marked by the pattern FDFF hex, and the 
’end of tracing’ has the pattern FCFF hex. For these events, the timestamp and REQ/ACK bytes 
of the SCSI event will all be 0’s, and the SCSI data word will contain a pattern telling the 
recording mode used during that tracing session. The recording mode bits are as follows: 

Bit Meaning 


DO - Dl, D8 - D9, D12 - D15 Not used. 

D2 If cleared, all data transfers are captured. If set, the number of data transfers 
captured depends on bit D7. 

D3 If set, all transitions of SCSI control lines REQ and ACK are captured. If cleared, 
only the transition which makes the data lines valid is captured. See section 
22.5.5. 

D4 If set, any transition of the SCSI control lines MSG, C/D or I/O is captured. 

If cleared, transitions on these lines are ignored. 

D5 If set, transitions on expansion port pin 1 are captured. 

D6 If set, all transitions up to the Selection phase are captured. All later transitions 

are ignored until the next Bus Free phase, unless the data pattern during selection 
matches the filtering pattern. 



D7 See bit D2. If in Skip data mode, and this bit is set, capture continues until the 
8th assertion of ACK in each Data-In or Data-Out phase. If cleared, capture 
continues until the 32nd assertion of ACK. 

DIO If set, only transitions on the SCSI BSY and SEL control lines are captured. 

All others are ignored. 

Dll Capture SCAM Protocol if set. 

C.3 READABLE FORMATS 

In addition to the Raw Data format, it is possible to upload in either Structured or Binary format. 
In these formats, the file will contain trace information just as it appears on the screen of the 
DSC-216 when displaying in these formats. These formats cannot be downloaded back into the 
DSC-216. 

C.4 TRACE DUMP FORMAT 

The Hex Dump format can be used to get the complete contents of the trace memory without 
having the problem of decrypting the transmitted data. Although the Hex Dump format requires 
more characters to transmit the same data as in the Raw Data format, it is less than it would be 
for the Structured or Binary formats. The Hex Dump format cannot be downloaded back into 
the DSC-216. 



APPENDIX D 


THE KEYPAD AND EXTERNAL KEYBOARD FUNCTIONS 
D.l GENERAL 

The table below lists the keys on the keypad, their corresponding keys on the external keyboard, 
and their functions. The table is organized so that it scans over the keypad column by column, 
starting at the upper left comer and ending with the bottom right corner. Each key is listed in its 
basic function, followed by its ’Alt’ and/or ’Ctrl’ function if they apply. All combinations not 
listed are reserved / undefined. 


D.2 THE KEYPAD & KEYBOARD FUNCTIONS TABLE: 


24-Key Pad: 

External Keyboard: 

Function: 

Esc 

Esc 

Escape - Cancel Function 

Ctrl-Esc 

Ctrl-Break 

Software Reset 

Quit 

Q 

Quit Function or Exit 
Current Menu. 

Alt-Quit 

- (Hyphen) 

Dash or Minus 

Alt 

Alt 

Select Alternate Function 

Ctrl 

Ctrl 

Select Control Function 

Run 

R 

Start Tracing 

Alt-Run 

C 

C (hex) 

Stop 

S 

Stop Tracing 

Alt-Stop 

8 

8 (hex) 

Display 

D 

Display 

Alt-Display 

4 

4 (hex) 

Ctrl-Display 

Ctrl-D 

Delete Data Pattern Byte in 
Search Pattern 

No 

N 

No 

Alt-No (0) 

0 

0 (hex) 

Pause 

P 

Pause Trace 

Alt-Pause(D) 

D 

D (hex) (Note: Same as 
<Display>). 

Flip 

F 

Flip (toggle) between 
display formats. 





Alt-Flip (9) 

9 

9 (hex) 

Ctrl-Flip (Find) 

Ctrl-F 

Find a user-specified string 
in the trace. 

Next 

<space> 

Display next page of the 
trace. 

Alt-Next (5) 

5 

5 (hex) 

Ctrl-Next ( A Fnxt) 

Ctrl-L 

Find Next Occurrence. 

Yes 

Y 

Yes 

Alt-yes 

1 

1 (hex) 

«- 

«- 

Move cursor left (non¬ 
destructive). 

Alt-(E) 

E 

E (hex) 

Trig 

T 

Display Trigger Selection 
Menu 

Alt-Trig (A) 

A 

A (hex) 

Ctrl-Trig ( A Time) 

Ctrl-T 

Calculate time differential 
between events in the trace. 

Prev 

- 

Display previous 
(approximate) page in trace 
(Note; Same as Alt-Quit). 

Alt-Prev (6) 

6 

6 (hex) 

Ctrl-Prev 

Ctrl-K 

Find previous occurrence. 

X 

X 

Don’t Care 

Alt-X (2) 

2 

2 (hex) 

Ctrl-X ( A Print) 

Ctrl-P 

Toggle output to external 
printer. 


-» 

Mover cursor right (non¬ 
destructive). 

Alt--»(F) 

F 

F (hex) (Note: Same as 
‘Find’). 

Mode 

M 

Display Mode-of-Recording 
Menu. 

Alt-Mode (B) 

B 

B (hex) 

Alph-Hx 

H 

Toggle between Alpha and 
Hex format in Data Phase. 




Alt-AlphHx (7) 

7 

7 (hex) 

Ctrl-AlphHx ( A TmF) 

E 

Toggle between Differential 
and Elapsed time format. 

Util 

U 

Display Utilities Menu. 

Alt-Util (3) 

3 

3 (hex) 

▲ 

A 

Move Cursor Up One Line. 

Alt- A (HM) 

Home 

Home (Put cursor to extreme 
top of current screen). 

Ctrl- A (PgUp) 

PgUp 

Page Up. 

▼ 

▼ 

Move Cursor Down One 
Line. 

Alt-Y (End) 

End 

End (Place cursor at extreme 
bottom end of current 
screen). 

Ctrl-Y ( A PgDn) 

PgDn 

Page Down. 

16/8 

W 

Toggle ‘Narrow’ or ‘Wide’ 
SCSI data width. 

Alt-16/8 (BS) 

Back Space 

Back Space 

Ctrl-16/8 ( A BinF) 

L 

Toggle between binary 
display formats. 


Enter 


Enter 


Enter Selection. 




APPENDIX E 


THE SCAM PROTOCOL 
E.l GENERAL 

The SCAM (SCSI Configured AutoMatically) protocol is a new addition to the SCSI-3 parallel 
standard which enables assignment of SCSI IDs to individual devices in a automatic way, totally 
under software control. The SCAM protocol has been designed to tolerate and to allow 
coexistence of legacy devices with hardwired IDs (jumpers) and the new SCAM-capable devices 
on the same SCSI cable. 

Please refer to the SCSI-3 specification (“SCSI-3 Parallel Interface 'SPI', Annex B”) for a detailed 
description of the protocol. This manual will only outline the concepts of SCAM. 

The SCAM protocol is defined in two levels (i.e. two versions): 

1. Level-1 SCAM master devices use hard IDs. Only a single level-1 SCAM master 
is allowed on the bus. The SCAM slave devices must power up before or at the 
same time with the master. This level protocol can be implemented using most 
of the currently available SCSI controller chips. 

2. Level-2 SCAM master devices may use hard or soft IDs. There may be multiple 
level-2 SCAM masters on the bus. The SCAM masters and slaves may power up 
independently. This level protocol may require a new generation of SCSI 
controller chips. 

The SCAM ID assignment sequence executes first thing after power-up, or after SCSI reset. The 
sequence is as follows: 

First, the SCAM master (the host adapter) scans the bus for hardwired IDs (the legacy devices), 
and builds a table of IDs already assigned. The SCAM devices are designed to ignore these 
short-duration selections. 

In the next step, SCAM master assigns the soft IDs to the SCAM capable devices. This is done 
using a modified Selection phase (with MSG line asserted by the master), and with no data bits 
being driven on the data bus. The BSY and SEL stay asserted to hold off the legacy devices. All 
SCAM devices now "wake up" and participate in the protocol. 

The devices drive certain control lines (C/D and I/O); they execute certain sequences on the D5, 
D6, and D7 lines, and use the lower five data bits for transfering information about ID which they 
(the slaves) prefer. The slaves then receive ID confirmation from the SCAM master via these low 
order bits. The SCAM protocol will assign IDs 0 through 7 on a Narrow bus, and IDs 0 through 
F hex on a Wide bus. The soft IDs come from the pool of IDs available following the hard ID 
scan. 

The SCAM protocol executes during the boot process. Its duration may take a few seconds or 
less, depending on how many devices are on the bus. 


SPECIAL SITUATIONS: 



What if there is no SCAM host adapter? Does that imply that all SCAM devices will respond 
slowly to Selection? "No". Each SCAM device is shipped with a preferred ID number. For 
example, external disk drives will ask for ID 6. 

Can there be more than one SCAM host adapter on the bus? "Yes, but" there is a SCAM function 
code which initiates a "dominant master contention" protocol. The first host adapter to win an 
Isolation becomes the master for that SCAM protocol sequence. All others become slaves. 

What if you have a non-SCAM master and several devices with the same preferred ID? In that 
case, the bus will have the same problems as SCSI-2 today, when multiple devices want the same 
ID. This is solved the same way, too — with jumpers on the devices to select a unique ID. SCAM 
doesn’t magically make old devices work, but it doesn’t make them any worse either. 

E.2 USING THE DSC-216 SCSI BUS ANALYZER FOR SCAM 

E.2.1. ACTIVATING THE SCAM DISPLAY 

1. Go to the Mode menu by pressing <Mode> from either the main menu or from a 
trace display 

2. Select item <6> - Capture SCAM Protocol so that an E’ (for ’enabled’) appears 
in the square brackets. This will also turn ON capture of the Phase Changes (item 
2). Both of these must be ON for SCAM tracing. 

3. Start tracing by pressing <RUN> from any of the normal places. The SCAM 
Protocol will be captured automatically when it occurs. 


See Section 3 for display of SCAM traces in structured and binary display format. 



APPENDIX F 


THE TRACE MIRROR MEMORY OPTION 

Ancot now offers a way to capture a trace at a remote location and return to your home office/lab 
with it. The technology that enables this feature is an optional FLASH ROM-based Trace Mirror 
memory add-on board for the DSC-216 family of SCSI bus Analyzers. 

The Trace Mirror memory is accessible using the SAVE TRACE / RESTORE TRACE functions 
from the main menu. You have the option of saving an exact copy of the entire installed trace 
memory (up to 128K events total) or several smaller traces. Memory in the Trace Mirror memory 
is allocated in blocks of 128 events. If you choose to save a smaller piece of trace memory, the 
remainder up to the next 128 event boundary will be wasted. 

The Trace Mirror memory can be used over and over, simply by rewriting new events to the old 
addresses within the mirror. This means you must be careful to keep a record of the addresses 
containing traces you want to preserve, so you don’t accidentally overwrite them. 

When you select the SAVE TRACE function in the main menu, you will be asked for the address 
range from trace memory to be saved. You will also be asked for the address in Trace Mirror 
memory where the trace saving should start. If you type in a Trace Mirror address which is not 
on a 128 byte boundary, the address you select will be rounded up. 

If the address range from the trace memory is not a multiple of 128 events, that will also be 
rounded up. The program will then attempt to write the trace data into the Trace Mirror memory. 
If it is successful, you will be informed of any change in addresses used within the Trace Mirror 
memory. If the transfer fails, you will be informed of that also. You should make a note of the 
addresses within the Trace Mirror which are in use. 

The FLASH ROM chips used for the Trace Mirror have a limited lifespan of 10000 write cycles. 
For most users, this will not be a problem, since the unit will be obsolete before you can do that 
many write cycles. However, to maximize the lifespan of your unit, you can use different start 
addresses for your saved short traces, rather than always starting at mirror address 0. 

When you use the RESTORE TRACE function in the main menu for restoring from the Trace 
Mirror memory to normal trace memory, you can specify the exact address range to be restored. 
The "granularity" of the FLASH write cycles does not apply. 



APPENDIX G 


SAVE/RESTORE TRACE DATA TO/FROM PC HOST 
VIA PARALLEL PORT 
PROGRAM NAME: 

ANCOTPAR.EXE is the file name of the program executing on the PC host. 
REQUIREMENTS: 

A bi-directional parallel port conforming to the Enhanced Parallel Port (EPP) standard, 
configured as LPT1 (using IRQ7) or LPT2 (using IRQ5). 

An MS-DOS operating system environment executing on a minimum of a 286 CPU. 

A special purpose, vendor supplied, parallel interconnect cable. 

OPERATION: 

The program operates in two modes: DOWNLOAD, when sending a data file to the DSC-216, 
and UPLOAD, when receiving data from the DSC-216 and capturing it in a file. 

In Download mode, the operator must first configure the DSC-216 to receive the data, and then 
start the utility ANCOTPAR.EXE on the PC host, with the appropriate filename. 

Type: 

ancotpar -D trace.001 <Enter> 

The data transfer then starts and proceeds automatically until the end of the file is reached. 

In Upload mode, the program operates as a Terminate-Stay-Resident (TSR) program so that it can 
be used in conjunction with a terminal emulator program to control the DSC-216 over the serial 
link. The operator starts the utility with the appropriate command line option and optional Path 
name and initial filename. 

The operator can then start the terminal emulator to control the DSC-216 directly. Several upload 
trace data files can be captured in one session starting with the specified optional filename or a 
default filename. The operator can then exit and suspend the TSR to free up the memory. 

COMMAND LINE OPTIONS: 

If the utility is evoked without any options or filename, a simple Help screen, describing the 
options, will be displayed. 

If options are entered they must precede the optional; directory path and/or filename. Available 
options are as follows: 

- D - program executes in DOWNLOAD mode to transmit the specified file to the DSC-216. 

- U - program executes in UPLOAD mode to receive trace data and capture it into one or more 
files. 


- L2 - select LPT2 as the parallel port for data transfer. The program default is LPT1. - LI can 
be entered if desired. 



- Q - suspend the program currently executing in UPLOAD mode as a TSR, in order to free up 
the memory. 

- T - required when using a Toshiba laptop computer, which utilize a slightly different parallel 
port format. 

FILE NAME GENERATION: 

Under MS-DOS, all filenames are composed of a base name of up to 8 characters, followed by 
an optional 3 character extension. This is generally referred to as the "8 dot 3" format. In Upload 
mode, the utility reserves the extent name for a 3-digit series number. If the operator should enter 
an extent name that is non-numeric, it will be replaced with the number "001" or the next 
available number. For example: 

If the filename is specified as "TEMP.TXT" then the first file will have the name 
"TEMP.001" and the 2nd file will be "TEMP.002", etc. 

If the operator enters a filename with a numeric extent, then the first file generated will use that 
number, or the next available number. For example: 

If the filename is specified as "TEMP.055" then the first file captured will be "TEMP.005" 
unless that filename already exists. Otherwise, the first file will be "TEMP.056" or the 
next available number. 

Remember that trace data in "raw format" only can be downloaded (restored) back to the 
DSC-216. 

Also note that a downloaded trace is always placed, in the DSC-216’s memory, starting at location 
zero (0). Therefore consecutive uploads automatically overlay the previous traces. Only a single 
uploaded trace can be examined at a time. 



APPENDIX H 


EXAMPLE OF USING THE PC & PROCOMM 

FOR SAVING/RESTORING THE TRACE VIA SERIAL PORT 

There are several communications programs which could be used for the remote control or 
up/downloading of programs or traces from/to the DSC-216 analyzer. In this Appendix, we will 
describe using the PROCOMM PLUS program, as an example. 

H.l SETTING UP PROCOMM OPTIONS 

First of all, we have to assume that your copy of the PROCOMM PLUS has been installed 
properly. 

Start the program by typing PCPLUS followed by the <Enter> key and the initial screen will be 
displayed. Then press any key to enter the terminal emulation mode. There is a good chance that 
the interface (of PROCOMM) is setup the way you need it, and that PROCOMM displays a good 
screen. 

However, if the setup (of PROCOMM) is wrong, almost any kind of exotic behavior can be 
expected. To correct it, type <Alt-S> and you will enter the PROCOMM SETUP so that you can 
select correct options. The following menu will be displayed: 


MODEM OPTIONS 

► TERMINAL OPTIONS 

- DISPLAY/SOUND OPTIONS 

► GENERAL OPTIONS 
HOST MODE OPTIONS 

► FILE/PATH OPTIONS 
COLOR OPTIONS 

► PROTOCOL OPTIONS 
EDITOR OPTIONS 
SAVE SETUP OPTIONS 


You need to edit only the few selections marked by ’►’above. 


A. TERMINAL OPTIONS: 



A - Terminal emulation.ANSI 

B - Duplex.FULL 

C - Soft flow Ctrl (XON/XOFF). ON 
D - Hard flow Ctrl (RTS/CTS).. OFF 

E - Line wrap.ON (Don’t Care) 

F - Screen scroll.ON (Don’t Care) 

G - CR translation.CR 

H - BS translation.NON DESTRUCTIVE 

I - Break length (millisecs).. 350 (Don’t Care) 

J - Enquiry (ENQ).OFF (Don’t Care) 

K - EGA/VGA true underline .... OFF (Don’t Care) 

L - Terminal width.80 (Don’t Care) 

M - ANSI 7 or 8 bit commands .. 8 BIT 


B. DISPLAY/SOUND OPTIONS 

In this options menu, all selections are "Don’t Care", except the E’. 

Set it as follows: 

F - Status line.OFF 

C. GENERAL OPTIONS 

In this options menu, all selections are "Don’t Care", except the ’B’. 

Set it as follows: 

B - CD high at exit.IGNORE 

D. FILE/PATH OPTIONS 

We recommend that you check the selected download path. The default path for 
downloaded file is: 

C:\PCPLUS\DOWNLOAD 

You should change it to whichever directory you prefer to use. 

E. PROTOCOL OPTIONS 

When selected, the following sub-menu will be displayed first: 

GENERAL OPTIONS 
► ASCII PROTOCOL OPTIONS 
KERMIT PROTOCOL OPTIONS 
ZMODEM PROTOCOL OPTIONS 
EXTERNAL PROTOCOL OPTIONS 


Select ASCII PROTOCOL OPTIONS and the following detailed selection sub-menu will be 













displayed. All selections here are "Don’t Care", except the ones listed below. 
Set them as follows: 


D - Character pacing (millisec).. 0 

E - Line pacing (1/10).0 

G - Strip 8th bit.NO 

I - CR translation (upload).NONE 

J - LF translation (upload).NONE 

K - CR translation (download).... NONE 
L - LF translation (download).... NONE 

When finished with all these selections, press <Esc> three times and save changes when 
prompted, or until the PROCOMM returns back to the terminal emulation screen. 

In the following two sections, we describe how to execute the SAVE TRACE TO HOST (upload) 
and RESTORE TRACE FROM HOST (download) functions using the PROCOMM program. 
We are assuming that you correctly connected together the serial ports of the DSC-216 and the 
PC. Use the serial (NULL MODEM) cable supplied by ANCOT (see pinout in appendix A.4) 
and connect the J3 ’SERIAL’ connector (DB-9) on the DSC-216 to the COM port on the PC. 

H.2 SAVE TRACE TO HOST VIA SERIAL PORT 

ON THE PC: 

- start PROCOMM PLUS (as described in setup) and enter 
the terminal emulation mode. 

- press <PgDown> to activate the upload function. 

- select <A> for ASCII format (all DSC-216 data formats are 
printable ASCII as transfered on the line) from the intermediate 
menu 

- as a response to the prompt, type the filename where you want to 
save the trace. 

- at this point, hold off pressing the <Enter> until the DSC-216 is 
ready. 

ON THE DSC-216: 

Starting from the main menu 

- press <3> for ’Save/Restore the trace’, 

- press <0> for ’save trace to host via serial port’, 

- press <0> for ’raw trace data format’ (you may select any 
other format, but remember that only the raw data format 
can be restored back). 

- select the starting and ending addresses to define section 
of the trace to be saved (default would be the full 

size used) 

- at this point, hold off confirming the transfer 
(i.e. do NOT press <Yes> !!) until the PC is ready. 


ON THE PC: 







- press the <Enter> to start the upload function. 


ON THE DSC-216: 

- press the <Yes> and you will see the address counter on the DSC-216 
counting and the data being listed on the PC. When the transfer is 
finished, message finished will be displayed on the DSC-216 
screen and there will be the EOT character (♦) displayed after the last 
data line on the PC. 

You may need to press <Esc> on the PC to stop the transfer and save the file. 

The trace is now saved on the PC in the designated file. 

You may exit PROCOM PLUS by typing <Alt-X> on the PC. 

You may return to the main menu on the DSC-216 by typing <Esc>. 

H.3 RESTORE TRACE FROM HOST VIA SERIAL PORT 

ON THE PC: 

- start PROCOMM PLUS and enter the terminal emulation mode 

- press <PgUp> to activate the upload function 

- select <A> for ASCII format (all DSC-216 data formats are 

in ASCn as transfered on the line) from the intermediate menu 

- as a response to the prompt, type in the filename where 
the previously saved trace was stored 

- at this point, hold off pressing <Enter> until the DSC-216 is ready. 

ON THE DSC-216: 

From the main menu on the DSC-216 

- press <3> for ’Save/Restore the trace’, 

- press <3> for ’restore trace from host via serial port’, 

- press <Y> to confirm the start of transfer. 


ON THE PC: 

- press <Enter> on the PC to start the restore operation. 

ON THE DSC-216: 

The address counter on the DSC-216 will count as the data 

is being transfered. When finished, the DSC-216 clears the screen and 

returns to the main menu. 


The trace has now been restored to the DSC-216 trace memory and can be displayed using the 
<D> display function. 

You may exit PROCOM PLUS by typing <Alt-X> on the PC. 



APPENDIX J 


SCSI FACTS & TIPS 

The importance of proper cabling and termination in SCSI systems cannot be overemphasized. 
Bad cabling or termination often results in erratic operation, or will sometimes cause the system 
not to operate at all. Erratic operation is the worst; the less frequently errors occur, the more 
difficult it is to diagnose their source. 

Speed of transmission over the bus is also an important factor in determining whether a marginal 
connection causes errors. Many existing devices on the market today transfer the data at rates 
under 1 MHz; SCSI-2 specifies a FAST mode at 10 MHz with tighter timing tolerances. The 
SCSI-3 FAST/20 mode uses even tighter timing and tolerances. Although devices of various 
speeds can be connected to the same bus, you may find that only the faster devices cause 
transmission errors. 

J.l CABLING 

We recommend using good quality cables. Always use cable with twisted pairs, whether the flat 
or the round type. As a rule, do not use the non-twisted type for external connections. Its 
sensitivity to electrical noise and crosstalk often results in low signal quality and low electrical 
margin, causing troubles that are not worth the small financial savings. To ensure good quality, 
buy cables from a reputable vendor. 

J.2 ELECTRICAL CONNECTION & TERMINATION ON THE SCSI BUS 

There are two standard SCSI bus interfaces: Single-Ended and Differential interfaces. They are 
mutually exclusive, and can not be mixed on the same bus. All devices and both terminators on 
the same SCSI bus must use the same kind of interface. All signals should also be terminated at 
both ends of the cable.The following paragraphs describe the termination schemes. 

The SCSI cable is a transmission line, and its correct termination is, therefore, very important. 
According to the SCSI specifications, as well as good engineering practice, the SCSI cable should 
be terminated on both physical ends. If multiple devices are connected to the same cable, then 
only the last ones, as positioned at the opposite physical ends of the SCSI cable, should have the 
terminators. You should never have more than two terminators. 

Termination is straightforward when using a SCSI adapter in the host computer connected to a 
single disk drive. In such case, terminators have to be installed in both the SCSI Host Bus 
Adapter (HBA) and the disk drive. This is often the case when peripherals are built into the 
system, such as an internal disk drive. 

It becomes more complicated if the same SCSI bus is connected to multiple devices in the 
enclosure (to internal drives) and also to external devices (like a CD-ROM drive or backup tape 
drive). In such cases, you have to determine what are the physical ends of the cable, and place 
terminators in those devices. Terminators in all other devices should be removed. 


In systems with the internal cable brought out to the back panel, where you would be attaching 



external peripherals (such as a backup tape drive) only occasionally, it may be practical to use one 
terminator permanently installed in the SCSI adapter (HBA) inside the chassis, and to use a 
removable external ’plug-in’ terminator in the external SCSI connector on the back panel of the 
host chassis. This external terminator may then be removed when attaching an additional external 
SCSI peripheral (e.g., tape for back-up), and inserted in the second daisy chained SCSI connector 
on the external peripheral. 

SINGLE-ENDED TERMINATION 

Single-ended termination uses a single line for each SCSI signal, and a matching ground reference 
line. A ‘True’ or asserted signal in this scheme is represented by a voltage level of 0 to 0.5 VDC, 
and a ‘False’ or de-asserted signal is represented by a voltage level of 2.5 to 5.25 VDC. 

There are two types of single-ended termination; Passive and Active. Passive was the scheme 
released with the original SCSI specification, while Active was released with the SCSI-2 
specification. 

Terminator Power, or TERMPWR, is normally supplied by the SCSI HBA (Host Bus Adapter) 
to pin 26 (on a 50-pin SCSI cable), but many SCSI devices have the option to supply it to their 
own terminators from their own power connection. 

Having multiple devices feed TERMPWR to the SCSI bus cable is not recommended due to the 
risk of short-circuit damage. The only time you should source TERMPWR from a non-HB A SCSI 
device is when the HBA does not supply it, or if the TERMPWR voltage from the HBA, at the 
end of the bus, is below specifications (4.0V for SCSI-1, 4.25V for SCSI-2). 

This illustration shows standard passive termination. 




Any SCSI Signal 


220 Ohm 

-o To SCSI Device 

330 Ohm 


ACTIVE TERMINATION (SINGLE-ENDED) 

Active termination places a low-dropout voltage regulator, and some filtering capacitors, in series 
between the TERMPWR line and one common side of an array of 110Q termination resistors. 
The open end of each resistor is then tied to one of the SCSI bus lines. 


Active termination is considered far superior to any form of passive termination because of its 
high degree of immunity to noise and voltage drops on the TERMPWR line. It should be used 
instead of passive termination wherever possible. 



DIFFERENTIAL TERMINATION 


Differential SCSI buses are used where very high noise immunity, and/or very long SCSI cable 
runs are required. They are rarely found in PC hardware due to the higher cost of the HBA and 
other devices. Differential devices are most commonly used in high-end computing environments, 
such as minicomputers, advanced workstations, or mainframes. A differential cable can be up to 
25 meters in length for any SCSI signaling rate. 

Differential SCSI, also called ‘Classic’ or ‘High Voltage,’ uses two electrically symmetrical lines, 
+SIGNAL and -SIGNAL, for each bus signal. A ground reference is used only in the terminator, 
and never for any of the signal lines. In fact, grounding a differential SCSI signal line can cause 
permanent damage to the connected device. 

This illustration shows standard Differential SCSI termination. 


TERMPWR (-H*.25y> 




To SCSI Device 


NOTE & WARNING 

It is important to remember that the terminator type must match the interface type; 

Single-ended interfaces must use single-ended terminators, and differential interfaces must use 
differential terminators. You cannot mix two different terminator types on the same cable, 
but you can mix active and passive single-ended terminators on a single-ended bus (though doing 
so is not generally considered good practice). 

Active terminators for Differential buses were never developed. There was no need for them, 
since differential buses already enjoy a high degree of noise immunity by design. 

J.3 TERMPWR CONSIDERATIONS 

As mentioned earlier, TERMPWR is normally supplied by the SCSI HBA. The SCSI-1 
specifications call for a minimum TERMPWR voltage, available on pin 26 (of a 50-pin SCSI 
connection), of 4.0V. The SCSI-2 specifications call for a minimum number of 4.25V. 

Experiments have shown that the higher the TERMPWR (up to a maximum of 5.25V), the better 
the noise immunity on the bus. If you are measuring TERMPWR, you should do so at each 
physical end of the SCSI cable. In some cases, you may find that a TERMPWR number which 
meets specifications at the host adapter is below specification at the end of the cable. 



If this is the case, and the device in question has the ability to supply TERMPWR to its own 
terminators, you should enable it to do so rather than let it pull TERMPWR from the SCSI bus 
cable. 


J.4 SCSI INITIATORS & TARGETS 

There are two kinds of devices on the SCSI bus, Initiators and Targets. The Initiators start the 
communication, and the Targets respond. The Initiators are devices which request that commands 
be carried out. Targets are devices which carry out commands. SCSI host adapters are 
Initiators, but at times, the host adapter may need to act as a Target for some commands. 

SCSI peripheral devices are Targets, but for some commands e.g., a COPY command, the 
peripheral may need to temporarily act as an Initiator. The single-byte SCSI bus (SCSI-1 or 
SCSI-2 ’Narrow’) supports up to eight devices, in any mix of Initiators and Targets, with the 
limitation that at least one Initiator and at least one Target are present. The SCSI-2 Wide’bus 
supports up to 16 devices with the same limitation (one Initiator, one Target). A sample block 
diagram of a typical SCSI bus is shown below. 



SCSI subsystems may be as simple as a single computer, with a single SCSI host adapter, 
connected to a single SCSI Target device, such as a disk drive. They can also be as complex as 
multiple SCSI host adapters, feeding multiple buses loaded up with devices. 

J.5 SCSI DEVICE ADDRESSING 

Each device on a SCSI cable must have its own unique address. The SCSI ID (initiator or target 
address) of each SCSI device must be selected by setting the proper jumpers or switches on the 
device itself. Duplicate addresses may hang the whole SCSI bus, or may result in unpredictable 
behavior. This latter case may be difficult to identify. However, in some cases, a scan of the SCSI 
bus will show the same device with the same ID showing up multiple times. 

You may not need to worry about SCSI IDs on working systems. However, as a rule, always 
verify SCSI ID selections when adding a new device to an existing bus. Most SCSI peripherals 
are shipped from the factory with SCSI ID set to 0. 

Some of the newest SCSI devices (starting in 1994) have their SCSI IDs assigned automatically 
without the need for mechanical jumpers. This method is defined in the SCSI-3 SCAM protocol 
standard document. A brief description of SCAM is in Appendix E. 






J.6 SCSI DATA PARITY 


The data path on the SCSI bus consists of 8 data lines and 1 parity line (on the ’Narrow’bus). 
SCSI-1 specified parity as an option. However, in SCSI-2, parity became mandatory. You can 
expect that practically all systems in operation today support parity. The only catch may be that 
on some devices of the SCSI-1 variety, parity could be disconnected and has to be enabled by a 
jumper. 

On some systems, a parity error, if detected, will be reported but the system remains operational; 
On other systems, parity errors will cripple operations entirely. 

J.7 MIXING SE & DIFF SCSI DEVICES 

The single-ended and differential interfaces are mutually exclusive. The SCSI bus must use either 
all single-ended, or all differential components. In situations when you need to connect 
single-ended and differential devices together on the same SCSI bus, you must use an appropriate 
Interface Converter, such as the ANCOT model SED-608 for the Narrow’ bus, or model 
SED-616 for the 2-byte Wide’bus. 

J.8 SCSI CABLE LENGTH 

The maximum cable lengths recommended by the SCSI specification are 6 meters for the 
single-ended bus (3 meters is called for if you’re using ‘Fast’ SCSI), and 25 meters for the 
differential bus. These lengths are recommended for configurations where you need to achieve 
the maximum specified performance. 

However, in many situations where longer lengths are required, maximum performance is not the 
issue. You should remember that you can extend the cable length significantly, especially in low 
noise environments, and/or if slower transfer rates are used and if all design standards are 
respected. 

J.9 EXTENDING THE SCSI CABLE 

One method of extending SCSI cables is to use single-ended to differential converters. Several 
schemes are possible, depending on how much distance is needed and which interface is used on 
the SCSI devices. See the following examples. 

Example 1: 









Example 2: 



Example 3: 



Total cable length: 31 m 
(25+6) 

The SED-608/616 Converter does not occupy any SCSI ID, and is functionally transparent to the 
SCSI devices connected. It is possible to use more than two converters in series and thus achieve 
even longer distance. 

The Converters are available from ANCOT for the Narrow’bus (SED-608) and for the Wide’bus 
(SED-616). Both models support asynchronous, synchronous, and SCSI-2 Fast modes. 

WARNING ! It is very important that you use good quality cables in these ’maximum systems’. 
The deficiencies in the cable (crosstalk, capacitance, skew,..) will accumulate over the long 
length, and may exceed its allowable value. 









